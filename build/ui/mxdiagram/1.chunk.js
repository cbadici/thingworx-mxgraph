(window["webpackJsonpmxdiagram"] = window["webpackJsonpmxdiagram"] || []).push([[1],{

/***/ "./src/generic/mxGraphUtils.ts":
/*!*************************************!*\
  !*** ./src/generic/mxGraphUtils.ts ***!
  \*************************************/
/*! exports provided: CreateGraphToolbar, CreateGraphOutline, loadStencilFiles, loadStyleFiles, exportGraphAsXml */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CreateGraphToolbar\", function() { return CreateGraphToolbar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CreateGraphOutline\", function() { return CreateGraphOutline; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"loadStencilFiles\", function() { return loadStencilFiles; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"loadStyleFiles\", function() { return loadStyleFiles; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"exportGraphAsXml\", function() { return exportGraphAsXml; });\n/* harmony import */ var _mxGraphImport__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mxGraphImport */ \"./src/generic/mxGraphImport.ts\");\n\r\nvar mxUtils = _mxGraphImport__WEBPACK_IMPORTED_MODULE_0__[\"mxgraph\"].mxUtils, mxToolbar = _mxGraphImport__WEBPACK_IMPORTED_MODULE_0__[\"mxgraph\"].mxToolbar, mxPrintPreview = _mxGraphImport__WEBPACK_IMPORTED_MODULE_0__[\"mxgraph\"].mxPrintPreview, mxWindow = _mxGraphImport__WEBPACK_IMPORTED_MODULE_0__[\"mxgraph\"].mxWindow, mxOutline = _mxGraphImport__WEBPACK_IMPORTED_MODULE_0__[\"mxgraph\"].mxOutline, mxStencilRegistry = _mxGraphImport__WEBPACK_IMPORTED_MODULE_0__[\"mxgraph\"].mxStencilRegistry, mxStencil = _mxGraphImport__WEBPACK_IMPORTED_MODULE_0__[\"mxgraph\"].mxStencil, mxConstants = _mxGraphImport__WEBPACK_IMPORTED_MODULE_0__[\"mxgraph\"].mxConstants, mxCodec = _mxGraphImport__WEBPACK_IMPORTED_MODULE_0__[\"mxgraph\"].mxCodec;\r\nfunction CreateGraphToolbar(graph) {\r\n    var content = document.createElement('div');\r\n    content.style.padding = '4px';\r\n    var tb = new mxToolbar(content);\r\n    tb.addItem('Zoom In', __webpack_require__(/*! ../images/zoom_in32.png */ \"./src/images/zoom_in32.png\"), function (evt) {\r\n        graph.zoomIn();\r\n    });\r\n    tb.addItem('Zoom Out', __webpack_require__(/*! ../images/zoom_out32.png */ \"./src/images/zoom_out32.png\"), function (evt) {\r\n        graph.zoomOut();\r\n    });\r\n    tb.addItem('Actual Size', __webpack_require__(/*! ../images/view_1_132.png */ \"./src/images/view_1_132.png\"), function (evt) {\r\n        graph.zoomActual();\r\n    });\r\n    tb.addItem('Print', __webpack_require__(/*! ../images/print32.png */ \"./src/images/print32.png\"), function (evt) {\r\n        var preview = new mxPrintPreview(graph, 1);\r\n        preview.open();\r\n    });\r\n    tb.addItem('Show', __webpack_require__(/*! ../images/newtab32.png */ \"./src/images/newtab32.png\"), function (evt) {\r\n        mxUtils.show(graph, null, 10, 10);\r\n    });\r\n    tb.addItem('Poster Print', __webpack_require__(/*! ../images/press32.png */ \"./src/images/press32.png\"), function (evt) {\r\n        var pageCount = mxUtils.prompt('Enter maximum page count', '1');\r\n        if (pageCount != null) {\r\n            var scale = mxUtils.getScaleForPageCount(pageCount, graph);\r\n            var preview = new mxPrintPreview(graph, scale);\r\n            preview.open();\r\n        }\r\n    });\r\n    var toolsWindow = new mxWindow('Tools', content, 50, 50, 240, 66, true);\r\n    toolsWindow.setMaximizable(false);\r\n    toolsWindow.setScrollable(false);\r\n    toolsWindow.setResizable(false);\r\n    toolsWindow.setVisible(true);\r\n    return toolsWindow;\r\n}\r\nfunction CreateGraphOutline(graph) {\r\n    // Creates the outline (navigator, overview) for moving\r\n    // around the graph in an mxWindow\r\n    var content = document.createElement('div');\r\n    content.style.position = 'absolute';\r\n    content.style.width = '100%';\r\n    content.style.height = '100%';\r\n    content.style.border = '1px solid whiteSmoke';\r\n    content.style.overflow = 'hidden';\r\n    var outline = new mxOutline(graph, content);\r\n    // create the window itself\r\n    var outlineWindow = new mxWindow('Outline', content, 250, 50, 200, 300, true);\r\n    outlineWindow.setMaximizable(false);\r\n    outlineWindow.setScrollable(false);\r\n    outlineWindow.setResizable(true);\r\n    outlineWindow.setVisible(true);\r\n    outlineWindow.setClosable(true);\r\n    // zoom actual to view the full chart\r\n    graph.zoomActual();\r\n    return outlineWindow;\r\n}\r\nfunction loadStencilFiles(files) {\r\n    for (var _i = 0, files_1 = files; _i < files_1.length; _i++) {\r\n        var filePath = files_1[_i];\r\n        var req = mxUtils.load(filePath);\r\n        var root = req.getDocumentElement();\r\n        var prefix = root.getAttribute(\"name\");\r\n        var shape = root.firstChild;\r\n        while (shape != null) {\r\n            if (shape.nodeType == mxConstants.NODETYPE_ELEMENT) {\r\n                var name = prefix + '.' + shape.getAttribute('name').replace(/ /g, '_');\r\n                mxStencilRegistry.addStencil(name.toLowerCase(), new mxStencil(shape));\r\n            }\r\n            shape = shape.nextSibling;\r\n        }\r\n    }\r\n}\r\nfunction loadStyleFiles(files, graph) {\r\n    for (var _i = 0, files_2 = files; _i < files_2.length; _i++) {\r\n        var filePath = files_2[_i];\r\n        var req = mxUtils.load(filePath);\r\n        var root = req.getDocumentElement();\r\n        new mxCodec(root.ownerDocument).decode(root, graph.getStylesheet());\r\n    }\r\n}\r\nfunction exportGraphAsXml(graph) {\r\n    var encoder = new mxCodec();\r\n    var node = encoder.encode(graph.getModel());\r\n    return mxUtils.getXml(node);\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvZ2VuZXJpYy9teEdyYXBoVXRpbHMudHM/ODVlZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXlDO0FBRXpDLElBQUksT0FBTyxHQUFHLHNEQUFPLENBQUMsT0FBTyxFQUN6QixTQUFTLEdBQUcsc0RBQU8sQ0FBQyxTQUFTLEVBQzdCLGNBQWMsR0FBRyxzREFBTyxDQUFDLGNBQWMsRUFDdkMsUUFBUSxHQUFHLHNEQUFPLENBQUMsUUFBUSxFQUMzQixTQUFTLEdBQUcsc0RBQU8sQ0FBQyxTQUFTLEVBQzdCLGlCQUFpQixHQUFHLHNEQUFPLENBQUMsaUJBQWlCLEVBQzdDLFNBQVMsR0FBRyxzREFBTyxDQUFDLFNBQVMsRUFDN0IsV0FBVyxHQUFHLHNEQUFPLENBQUMsV0FBVyxFQUNqQyxPQUFPLEdBQUcsc0RBQU8sQ0FBQyxPQUFPLENBQUM7QUFFeEIsNEJBQTZCLEtBQUs7SUFDcEMsSUFBSSxPQUFPLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM1QyxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7SUFFOUIsSUFBSSxFQUFFLEdBQUcsSUFBSSxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFaEMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsbUJBQU8sQ0FBQywyREFBeUIsQ0FBQyxFQUFFLFVBQVUsR0FBRztRQUNuRSxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDbkIsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxtQkFBTyxDQUFDLDZEQUEwQixDQUFDLEVBQUUsVUFBVSxHQUFHO1FBQ3JFLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNwQixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLG1CQUFPLENBQUMsNkRBQTBCLENBQUMsRUFBRSxVQUFVLEdBQUc7UUFDeEUsS0FBSyxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ3ZCLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsbUJBQU8sQ0FBQyx1REFBdUIsQ0FBQyxFQUFFLFVBQVUsR0FBRztRQUMvRCxJQUFJLE9BQU8sR0FBRyxJQUFJLGNBQWMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDM0MsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ25CLENBQUMsQ0FBQyxDQUFDO0lBQ0gsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsbUJBQU8sQ0FBQyx5REFBd0IsQ0FBQyxFQUFFLFVBQVUsR0FBRztRQUMvRCxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3RDLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLE9BQU8sQ0FBQyxjQUFjLEVBQUUsbUJBQU8sQ0FBQyx1REFBdUIsQ0FBQyxFQUFFLFVBQVUsR0FBRztRQUN0RSxJQUFJLFNBQVMsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLDBCQUEwQixFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBRWhFLElBQUksU0FBUyxJQUFJLElBQUksRUFBRTtZQUNuQixJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsb0JBQW9CLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQzNELElBQUksT0FBTyxHQUFHLElBQUksY0FBYyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztZQUMvQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDbEI7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksV0FBVyxHQUFHLElBQUksUUFBUSxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3hFLFdBQVcsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbEMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNqQyxXQUFXLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2hDLFdBQVcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDN0IsT0FBTyxXQUFXLENBQUM7QUFDdkIsQ0FBQztBQUVLLDRCQUE2QixLQUFLO0lBQ3BDLHVEQUF1RDtJQUN2RCxrQ0FBa0M7SUFDbEMsSUFBSSxPQUFPLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM1QyxPQUFPLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxVQUFVLENBQUM7SUFDcEMsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDO0lBQzdCLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztJQUM5QixPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxzQkFBc0IsQ0FBQztJQUM5QyxPQUFPLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7SUFDbEMsSUFBSSxPQUFPLEdBQUcsSUFBSSxTQUFTLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzVDLDJCQUEyQjtJQUMzQixJQUFJLGFBQWEsR0FBRyxJQUFJLFFBQVEsQ0FBQyxTQUFTLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5RSxhQUFhLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3BDLGFBQWEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbkMsYUFBYSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNqQyxhQUFhLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQy9CLGFBQWEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDaEMscUNBQXFDO0lBQ3JDLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUNuQixPQUFPLGFBQWEsQ0FBQztBQUN6QixDQUFDO0FBRUssMEJBQTJCLEtBQWU7SUFDNUMsS0FBdUIsVUFBSyxFQUFMLGVBQUssRUFBTCxtQkFBSyxFQUFMLElBQUs7UUFBdkIsSUFBTSxRQUFRO1FBQ2YsSUFBSSxHQUFHLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNqQyxJQUFJLElBQUksR0FBRyxHQUFHLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztRQUNwQyxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3ZDLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7UUFFNUIsT0FBTyxLQUFLLElBQUksSUFBSSxFQUFFO1lBQ2xCLElBQUksS0FBSyxDQUFDLFFBQVEsSUFBSSxXQUFXLENBQUMsZ0JBQWdCLEVBQUU7Z0JBQ2hELElBQUksSUFBSSxHQUFHLE1BQU0sR0FBRyxHQUFHLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO2dCQUN4RSxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFFLElBQUksU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7YUFDMUU7WUFDRCxLQUFLLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQztTQUM3QjtLQUNKO0FBQ0wsQ0FBQztBQUVLLHdCQUF5QixLQUFlLEVBQUUsS0FBSztJQUNqRCxLQUF1QixVQUFLLEVBQUwsZUFBSyxFQUFMLG1CQUFLLEVBQUwsSUFBSztRQUF2QixJQUFNLFFBQVE7UUFDZixJQUFJLEdBQUcsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2pDLElBQUksSUFBSSxHQUFHLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1FBQ3BDLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDO0tBQ3ZFO0FBQ0wsQ0FBQztBQUVLLDBCQUEyQixLQUFLO0lBQ2xDLElBQUksT0FBTyxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7SUFDL0IsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUM1QyxPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDN0IsQ0FBQyIsImZpbGUiOiIuL3NyYy9nZW5lcmljL214R3JhcGhVdGlscy50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG14Z3JhcGggfSBmcm9tIFwiLi9teEdyYXBoSW1wb3J0XCJcclxuXHJcbmxldCBteFV0aWxzID0gbXhncmFwaC5teFV0aWxzLFxyXG4gICAgbXhUb29sYmFyID0gbXhncmFwaC5teFRvb2xiYXIsXHJcbiAgICBteFByaW50UHJldmlldyA9IG14Z3JhcGgubXhQcmludFByZXZpZXcsXHJcbiAgICBteFdpbmRvdyA9IG14Z3JhcGgubXhXaW5kb3csXHJcbiAgICBteE91dGxpbmUgPSBteGdyYXBoLm14T3V0bGluZSxcclxuICAgIG14U3RlbmNpbFJlZ2lzdHJ5ID0gbXhncmFwaC5teFN0ZW5jaWxSZWdpc3RyeSxcclxuICAgIG14U3RlbmNpbCA9IG14Z3JhcGgubXhTdGVuY2lsLFxyXG4gICAgbXhDb25zdGFudHMgPSBteGdyYXBoLm14Q29uc3RhbnRzLFxyXG4gICAgbXhDb2RlYyA9IG14Z3JhcGgubXhDb2RlYztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBDcmVhdGVHcmFwaFRvb2xiYXIoZ3JhcGgpIHtcclxuICAgIHZhciBjb250ZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBjb250ZW50LnN0eWxlLnBhZGRpbmcgPSAnNHB4JztcclxuXHJcbiAgICB2YXIgdGIgPSBuZXcgbXhUb29sYmFyKGNvbnRlbnQpO1xyXG5cclxuICAgIHRiLmFkZEl0ZW0oJ1pvb20gSW4nLCByZXF1aXJlKCcuLi9pbWFnZXMvem9vbV9pbjMyLnBuZycpLCBmdW5jdGlvbiAoZXZ0KSB7XHJcbiAgICAgICAgZ3JhcGguem9vbUluKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0Yi5hZGRJdGVtKCdab29tIE91dCcsIHJlcXVpcmUoJy4uL2ltYWdlcy96b29tX291dDMyLnBuZycpLCBmdW5jdGlvbiAoZXZ0KSB7XHJcbiAgICAgICAgZ3JhcGguem9vbU91dCgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGIuYWRkSXRlbSgnQWN0dWFsIFNpemUnLCByZXF1aXJlKCcuLi9pbWFnZXMvdmlld18xXzEzMi5wbmcnKSwgZnVuY3Rpb24gKGV2dCkge1xyXG4gICAgICAgIGdyYXBoLnpvb21BY3R1YWwoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRiLmFkZEl0ZW0oJ1ByaW50JywgcmVxdWlyZSgnLi4vaW1hZ2VzL3ByaW50MzIucG5nJyksIGZ1bmN0aW9uIChldnQpIHtcclxuICAgICAgICB2YXIgcHJldmlldyA9IG5ldyBteFByaW50UHJldmlldyhncmFwaCwgMSk7XHJcbiAgICAgICAgcHJldmlldy5vcGVuKCk7XHJcbiAgICB9KTtcclxuICAgIHRiLmFkZEl0ZW0oJ1Nob3cnLCByZXF1aXJlKCcuLi9pbWFnZXMvbmV3dGFiMzIucG5nJyksIGZ1bmN0aW9uIChldnQpIHtcclxuICAgICAgICBteFV0aWxzLnNob3coZ3JhcGgsIG51bGwsIDEwLCAxMCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0Yi5hZGRJdGVtKCdQb3N0ZXIgUHJpbnQnLCByZXF1aXJlKCcuLi9pbWFnZXMvcHJlc3MzMi5wbmcnKSwgZnVuY3Rpb24gKGV2dCkge1xyXG4gICAgICAgIHZhciBwYWdlQ291bnQgPSBteFV0aWxzLnByb21wdCgnRW50ZXIgbWF4aW11bSBwYWdlIGNvdW50JywgJzEnKTtcclxuXHJcbiAgICAgICAgaWYgKHBhZ2VDb3VudCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHZhciBzY2FsZSA9IG14VXRpbHMuZ2V0U2NhbGVGb3JQYWdlQ291bnQocGFnZUNvdW50LCBncmFwaCk7XHJcbiAgICAgICAgICAgIHZhciBwcmV2aWV3ID0gbmV3IG14UHJpbnRQcmV2aWV3KGdyYXBoLCBzY2FsZSk7XHJcbiAgICAgICAgICAgIHByZXZpZXcub3BlbigpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGxldCB0b29sc1dpbmRvdyA9IG5ldyBteFdpbmRvdygnVG9vbHMnLCBjb250ZW50LCA1MCwgNTAsIDI0MCwgNjYsIHRydWUpO1xyXG4gICAgdG9vbHNXaW5kb3cuc2V0TWF4aW1pemFibGUoZmFsc2UpO1xyXG4gICAgdG9vbHNXaW5kb3cuc2V0U2Nyb2xsYWJsZShmYWxzZSk7XHJcbiAgICB0b29sc1dpbmRvdy5zZXRSZXNpemFibGUoZmFsc2UpO1xyXG4gICAgdG9vbHNXaW5kb3cuc2V0VmlzaWJsZSh0cnVlKTtcclxuICAgIHJldHVybiB0b29sc1dpbmRvdztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIENyZWF0ZUdyYXBoT3V0bGluZShncmFwaCkge1xyXG4gICAgLy8gQ3JlYXRlcyB0aGUgb3V0bGluZSAobmF2aWdhdG9yLCBvdmVydmlldykgZm9yIG1vdmluZ1xyXG4gICAgLy8gYXJvdW5kIHRoZSBncmFwaCBpbiBhbiBteFdpbmRvd1xyXG4gICAgdmFyIGNvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGNvbnRlbnQuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xyXG4gICAgY29udGVudC5zdHlsZS53aWR0aCA9ICcxMDAlJztcclxuICAgIGNvbnRlbnQuc3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xyXG4gICAgY29udGVudC5zdHlsZS5ib3JkZXIgPSAnMXB4IHNvbGlkIHdoaXRlU21va2UnO1xyXG4gICAgY29udGVudC5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xyXG4gICAgdmFyIG91dGxpbmUgPSBuZXcgbXhPdXRsaW5lKGdyYXBoLCBjb250ZW50KTtcclxuICAgIC8vIGNyZWF0ZSB0aGUgd2luZG93IGl0c2VsZlxyXG4gICAgbGV0IG91dGxpbmVXaW5kb3cgPSBuZXcgbXhXaW5kb3coJ091dGxpbmUnLCBjb250ZW50LCAyNTAsIDUwLCAyMDAsIDMwMCwgdHJ1ZSk7XHJcbiAgICBvdXRsaW5lV2luZG93LnNldE1heGltaXphYmxlKGZhbHNlKTtcclxuICAgIG91dGxpbmVXaW5kb3cuc2V0U2Nyb2xsYWJsZShmYWxzZSk7XHJcbiAgICBvdXRsaW5lV2luZG93LnNldFJlc2l6YWJsZSh0cnVlKTtcclxuICAgIG91dGxpbmVXaW5kb3cuc2V0VmlzaWJsZSh0cnVlKTtcclxuICAgIG91dGxpbmVXaW5kb3cuc2V0Q2xvc2FibGUodHJ1ZSk7XHJcbiAgICAvLyB6b29tIGFjdHVhbCB0byB2aWV3IHRoZSBmdWxsIGNoYXJ0XHJcbiAgICBncmFwaC56b29tQWN0dWFsKCk7XHJcbiAgICByZXR1cm4gb3V0bGluZVdpbmRvdztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRTdGVuY2lsRmlsZXMoZmlsZXM6IHN0cmluZ1tdKSB7XHJcbiAgICBmb3IgKGNvbnN0IGZpbGVQYXRoIG9mIGZpbGVzKSB7XHJcbiAgICAgICAgdmFyIHJlcSA9IG14VXRpbHMubG9hZChmaWxlUGF0aCk7XHJcbiAgICAgICAgdmFyIHJvb3QgPSByZXEuZ2V0RG9jdW1lbnRFbGVtZW50KCk7XHJcbiAgICAgICAgdmFyIHByZWZpeCA9IHJvb3QuZ2V0QXR0cmlidXRlKFwibmFtZVwiKTtcclxuICAgICAgICB2YXIgc2hhcGUgPSByb290LmZpcnN0Q2hpbGQ7XHJcblxyXG4gICAgICAgIHdoaWxlIChzaGFwZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGlmIChzaGFwZS5ub2RlVHlwZSA9PSBteENvbnN0YW50cy5OT0RFVFlQRV9FTEVNRU5UKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbmFtZSA9IHByZWZpeCArICcuJyArIHNoYXBlLmdldEF0dHJpYnV0ZSgnbmFtZScpLnJlcGxhY2UoLyAvZywgJ18nKTtcclxuICAgICAgICAgICAgICAgIG14U3RlbmNpbFJlZ2lzdHJ5LmFkZFN0ZW5jaWwobmFtZS50b0xvd2VyQ2FzZSgpLCBuZXcgbXhTdGVuY2lsKHNoYXBlKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2hhcGUgPSBzaGFwZS5uZXh0U2libGluZztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBsb2FkU3R5bGVGaWxlcyhmaWxlczogc3RyaW5nW10sIGdyYXBoKSB7XHJcbiAgICBmb3IgKGNvbnN0IGZpbGVQYXRoIG9mIGZpbGVzKSB7XHJcbiAgICAgICAgdmFyIHJlcSA9IG14VXRpbHMubG9hZChmaWxlUGF0aCk7XHJcbiAgICAgICAgdmFyIHJvb3QgPSByZXEuZ2V0RG9jdW1lbnRFbGVtZW50KCk7XHJcbiAgICAgICAgbmV3IG14Q29kZWMocm9vdC5vd25lckRvY3VtZW50KS5kZWNvZGUocm9vdCwgZ3JhcGguZ2V0U3R5bGVzaGVldCgpKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGV4cG9ydEdyYXBoQXNYbWwoZ3JhcGgpIHtcclxuICAgIHZhciBlbmNvZGVyID0gbmV3IG14Q29kZWMoKTtcclxuXHR2YXIgbm9kZSA9IGVuY29kZXIuZW5jb2RlKGdyYXBoLmdldE1vZGVsKCkpO1xyXG5cdHJldHVybiBteFV0aWxzLmdldFhtbChub2RlKTtcclxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/generic/mxGraphUtils.ts\n");

/***/ }),

/***/ "./src/images/newtab32.png":
/*!*********************************!*\
  !*** ./src/images/newtab32.png ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__.p + \"b390da2ae6f3826ec7ae78363942d61e.png\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaW1hZ2VzL25ld3RhYjMyLnBuZz9iOTk4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6Ii4vc3JjL2ltYWdlcy9uZXd0YWIzMi5wbmcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJiMzkwZGEyYWU2ZjM4MjZlYzdhZTc4MzYzOTQyZDYxZS5wbmdcIjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/images/newtab32.png\n");

/***/ }),

/***/ "./src/images/press32.png":
/*!********************************!*\
  !*** ./src/images/press32.png ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__.p + \"dab6009301a62cd40fa216f2f3a3d361.png\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaW1hZ2VzL3ByZXNzMzIucG5nPzMzNGUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiLi9zcmMvaW1hZ2VzL3ByZXNzMzIucG5nLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZGFiNjAwOTMwMWE2MmNkNDBmYTIxNmYyZjNhM2QzNjEucG5nXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/images/press32.png\n");

/***/ }),

/***/ "./src/images/print32.png":
/*!********************************!*\
  !*** ./src/images/print32.png ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__.p + \"f59c430b7e4a9661bb5b957fc0b82fdd.png\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaW1hZ2VzL3ByaW50MzIucG5nPzMxMDUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiLi9zcmMvaW1hZ2VzL3ByaW50MzIucG5nLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZjU5YzQzMGI3ZTRhOTY2MWJiNWI5NTdmYzBiODJmZGQucG5nXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/images/print32.png\n");

/***/ }),

/***/ "./src/images/view_1_132.png":
/*!***********************************!*\
  !*** ./src/images/view_1_132.png ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__.p + \"71119cc4172ea3f7cdbbe36d798b3534.png\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaW1hZ2VzL3ZpZXdfMV8xMzIucG5nP2ZkNDIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiLi9zcmMvaW1hZ2VzL3ZpZXdfMV8xMzIucG5nLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiNzExMTljYzQxNzJlYTNmN2NkYmJlMzZkNzk4YjM1MzQucG5nXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/images/view_1_132.png\n");

/***/ }),

/***/ "./src/images/zoom_in32.png":
/*!**********************************!*\
  !*** ./src/images/zoom_in32.png ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__.p + \"4ff9f29a75df3d3acba11785b60770e5.png\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaW1hZ2VzL3pvb21faW4zMi5wbmc/YTMxNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIuL3NyYy9pbWFnZXMvem9vbV9pbjMyLnBuZy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjRmZjlmMjlhNzVkZjNkM2FjYmExMTc4NWI2MDc3MGU1LnBuZ1wiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/images/zoom_in32.png\n");

/***/ }),

/***/ "./src/images/zoom_out32.png":
/*!***********************************!*\
  !*** ./src/images/zoom_out32.png ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__.p + \"5880d20e5c3f33e17688f3c496a83eab.png\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaW1hZ2VzL3pvb21fb3V0MzIucG5nP2JmMjQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiLi9zcmMvaW1hZ2VzL3pvb21fb3V0MzIucG5nLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiNTg4MGQyMGU1YzNmMzNlMTc2ODhmM2M0OTZhODNlYWIucG5nXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/images/zoom_out32.png\n");

/***/ }),

/***/ "./src/value_process/CellFactory.ts":
/*!******************************************!*\
  !*** ./src/value_process/CellFactory.ts ***!
  \******************************************/
/*! exports provided: GraphCellRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GraphCellRenderer\", function() { return GraphCellRenderer; });\n/* harmony import */ var _generic_mxGraphImport__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../generic/mxGraphImport */ \"./src/generic/mxGraphImport.ts\");\n/* harmony import */ var _mxValueProcessLayout__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mxValueProcessLayout */ \"./src/value_process/mxValueProcessLayout.ts\");\nvar __extends = (undefined && undefined.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n\r\n\r\nvar mxStackLayout = _generic_mxGraphImport__WEBPACK_IMPORTED_MODULE_0__[\"mxgraph\"].mxStackLayout;\r\nvar LayoutFactory = /** @class */ (function () {\r\n    function LayoutFactory() {\r\n    }\r\n    LayoutFactory.initialize = function (graph) {\r\n        LayoutFactory.defaultLayout = new _mxValueProcessLayout__WEBPACK_IMPORTED_MODULE_1__[\"mxValueProcessLayout\"](graph, false);\r\n        LayoutFactory.defaultLayout.resizeParent = true;\r\n        LayoutFactory.defaultLayout.border = 1;\r\n        LayoutFactory.defaultLayout.horizontal = true;\r\n        LayoutFactory.defaultLayout.spacing = 50;\r\n        LayoutFactory.defaultLayout.resizeParent = true;\r\n        LayoutFactory.supplierLayout = new _mxValueProcessLayout__WEBPACK_IMPORTED_MODULE_1__[\"mxValueProcessLayout\"](graph, true);\r\n        LayoutFactory.supplierLayout.resizeParent = true;\r\n        LayoutFactory.supplierLayout.spacing = 20;\r\n        LayoutFactory.supplierLayout.marginTop = 80;\r\n        LayoutFactory.supplierLayout.marginBottom = 20;\r\n        LayoutFactory.supplierLayout.marginLeft = 10;\r\n        LayoutFactory.factoryLayout = new _mxValueProcessLayout__WEBPACK_IMPORTED_MODULE_1__[\"mxValueProcessLayout\"](graph, false);\r\n        LayoutFactory.factoryLayout.resizeParent = true;\r\n        LayoutFactory.factoryLayout.spacing = 20;\r\n        LayoutFactory.factoryLayout.marginTop = 80;\r\n        LayoutFactory.factoryLayout.marginBottom = 20;\r\n        LayoutFactory.factoryLayout.marginLeft = 10;\r\n        LayoutFactory.partLayout = new _mxValueProcessLayout__WEBPACK_IMPORTED_MODULE_1__[\"mxValueProcessLayout\"](graph, false);\r\n        LayoutFactory.partLayout.resizeParent = true;\r\n        LayoutFactory.partLayout.fill = true;\r\n        LayoutFactory.partLayout.fillSpacing = 5;\r\n        LayoutFactory.allSuppliersLayout = new _mxValueProcessLayout__WEBPACK_IMPORTED_MODULE_1__[\"mxValueProcessLayout\"](graph, false);\r\n        LayoutFactory.allSuppliersLayout.resizeParent = true;\r\n        LayoutFactory.allSuppliersLayout.spacing = 20;\r\n        LayoutFactory.hallInventoryLayout = new _mxValueProcessLayout__WEBPACK_IMPORTED_MODULE_1__[\"mxValueProcessLayout\"](graph, false);\r\n        LayoutFactory.hallInventoryLayout.resizeParent = true;\r\n        LayoutFactory.hallInventoryLayout.spacing = 20;\r\n        LayoutFactory.processLayout = new _mxValueProcessLayout__WEBPACK_IMPORTED_MODULE_1__[\"mxValueProcessLayout\"](graph, true);\r\n        LayoutFactory.processLayout.resizeParent = true;\r\n        LayoutFactory.processLayout.spacing = 10;\r\n        LayoutFactory.processLayout.marginTop = 5;\r\n        LayoutFactory.processLayout.marginBottom = 5;\r\n        LayoutFactory.processLayout.marginLeft = 5;\r\n    };\r\n    return LayoutFactory;\r\n}());\r\n/**\r\n * A abstract cell renderer. This is responsible for rendering the label, and tooltip of a cell\r\n */\r\nvar CellRendererAbstract = /** @class */ (function () {\r\n    function CellRendererAbstract() {\r\n    }\r\n    CellRendererAbstract.prototype.getRenderedLabel = function (cell) { return; };\r\n    ;\r\n    CellRendererAbstract.prototype.getTooltip = function (cell) { return; };\r\n    CellRendererAbstract.prototype.isLabelClipped = function (cell) { return false; };\r\n    CellRendererAbstract.prototype.isCellFoldable = function (cell) { return true; };\r\n    CellRendererAbstract.prototype.getLayout = function (cell) { return LayoutFactory.defaultLayout; };\r\n    ;\r\n    CellRendererAbstract.prototype.isCellSelectable = function (cell) { return true; };\r\n    CellRendererAbstract.prototype.isCellEditable = function (cell) { return false; };\r\n    return CellRendererAbstract;\r\n}());\r\nvar PartRenderer = /** @class */ (function (_super) {\r\n    __extends(PartRenderer, _super);\r\n    function PartRenderer() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * Renderer of a cell that represents a part. Just return the title\r\n     */\r\n    PartRenderer.prototype.getRenderedLabel = function (cell) {\r\n        if (cell.value.objectLink) {\r\n            var link = document.createElement('a');\r\n            link.href = cell.value.objectLink;\r\n            link.textContent = cell.value.title;\r\n            link.target = '_blank';\r\n            link.style.color = 'white';\r\n            return link.outerHTML;\r\n        }\r\n        else {\r\n            return cell.value.title;\r\n        }\r\n    };\r\n    ;\r\n    /**\r\n     * The tooltip is just the title of the part\r\n     */\r\n    PartRenderer.prototype.getTooltip = function (cell) {\r\n        return cell.value.title;\r\n    };\r\n    PartRenderer.prototype.isLabelClipped = function (cell) { return true; };\r\n    PartRenderer.prototype.getLayout = function (cell) { return LayoutFactory.partLayout; };\r\n    return PartRenderer;\r\n}(CellRendererAbstract));\r\n/**\r\n * Renderer of a supplier cell\r\n * At the moment this is rendererd as a swimlane cell with only the title\r\n */\r\nvar SupplierCellRenderer = /** @class */ (function (_super) {\r\n    __extends(SupplierCellRenderer, _super);\r\n    function SupplierCellRenderer() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    SupplierCellRenderer.prototype.getRenderedLabel = function (cell) {\r\n        var link = document.createElement('a');\r\n        link.href = cell.value.objectLink;\r\n        link.textContent = cell.value.name;\r\n        link.target = '_blank';\r\n        return link.outerHTML;\r\n    };\r\n    SupplierCellRenderer.prototype.getTooltip = function (cell) {\r\n        return cell.value.name;\r\n    };\r\n    SupplierCellRenderer.prototype.isLabelClipped = function (cell) { return true; };\r\n    SupplierCellRenderer.prototype.getLayout = function (cell) { return LayoutFactory.supplierLayout; };\r\n    return SupplierCellRenderer;\r\n}(CellRendererAbstract));\r\n/**\r\n * The default process renderer. Just returns the value of the cell\r\n */\r\nvar ProcessCellRenderer = /** @class */ (function (_super) {\r\n    __extends(ProcessCellRenderer, _super);\r\n    function ProcessCellRenderer() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    ProcessCellRenderer.prototype.getRenderedLabel = function (cell) {\r\n        return cell.value.name;\r\n    };\r\n    ProcessCellRenderer.prototype.getTooltip = function (cell) {\r\n        return cell.value.name;\r\n    };\r\n    ProcessCellRenderer.prototype.getLayout = function (cell) { return LayoutFactory.processLayout; };\r\n    return ProcessCellRenderer;\r\n}(CellRendererAbstract));\r\n/**\r\n * The default cell renderer. Just returns the value of the cell\r\n */\r\nvar DefaultVertexRenderer = /** @class */ (function (_super) {\r\n    __extends(DefaultVertexRenderer, _super);\r\n    function DefaultVertexRenderer() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    DefaultVertexRenderer.prototype.getRenderedLabel = function (cell) {\r\n        return cell.value;\r\n    };\r\n    DefaultVertexRenderer.prototype.getTooltip = function (cell) {\r\n        return cell.value ? cell.value.tooltip : \"\";\r\n    };\r\n    DefaultVertexRenderer.prototype.isCellFoldable = function (cell) { return false; };\r\n    return DefaultVertexRenderer;\r\n}(CellRendererAbstract));\r\n/**\r\n * The default edge renderer.\r\n */\r\nvar DefaultEdgeRenderer = /** @class */ (function (_super) {\r\n    __extends(DefaultEdgeRenderer, _super);\r\n    function DefaultEdgeRenderer() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    DefaultEdgeRenderer.prototype.getRenderedLabel = function (cell) {\r\n        var content = document.createElement('div');\r\n        content.style.display = 'flex';\r\n        content.style.flexDirection = 'column';\r\n        content.style.alignItems = 'center';\r\n        var link = document.createElement('a');\r\n        link.href = cell.value ? cell.value.objectLink : \"\";\r\n        link.textContent = cell.value ? cell.value.label : \"\";\r\n        link.target = '_blank';\r\n        content.appendChild(link);\r\n        var image = document.createElement('img');\r\n        image.src = __webpack_require__(/*! ./resources/truckIcon.png */ \"./src/value_process/resources/truckIcon.png\");\r\n        image.style.width = '52px';\r\n        image.style.height = '25px';\r\n        content.appendChild(image);\r\n        if (cell.value && cell.value.info) {\r\n            for (var key in cell.value.info) {\r\n                if (cell.value.info.hasOwnProperty(key)) {\r\n                    var element = cell.value.info[key];\r\n                    var label = document.createElement(\"span\");\r\n                    label.textContent = key + \": \" + cell.value.info[key];\r\n                    content.appendChild(label);\r\n                }\r\n            }\r\n        }\r\n        return content.outerHTML;\r\n    };\r\n    DefaultEdgeRenderer.prototype.getTooltip = function (cell) {\r\n        return \"\";\r\n    };\r\n    DefaultEdgeRenderer.prototype.isCellFoldable = function (cell) { return false; };\r\n    return DefaultEdgeRenderer;\r\n}(CellRendererAbstract));\r\nvar AllSupplierCell = /** @class */ (function (_super) {\r\n    __extends(AllSupplierCell, _super);\r\n    function AllSupplierCell() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    AllSupplierCell.prototype.getRenderedLabel = function (cell) { return; };\r\n    ;\r\n    AllSupplierCell.prototype.getTooltip = function (cell) { return; };\r\n    AllSupplierCell.prototype.isCellFoldable = function (cell) { return false; };\r\n    AllSupplierCell.prototype.getLayout = function (cell) { return LayoutFactory.allSuppliersLayout; };\r\n    AllSupplierCell.prototype.isCellSelectable = function (cell) { return false; };\r\n    return AllSupplierCell;\r\n}(CellRendererAbstract));\r\nvar PartDetailsCell = /** @class */ (function (_super) {\r\n    __extends(PartDetailsCell, _super);\r\n    function PartDetailsCell() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    PartDetailsCell.prototype.getRenderedLabel = function (cell) {\r\n        var container = document.createElement('div');\r\n        var keyElement = document.createElement('strong');\r\n        keyElement.textContent = cell.value.key + ': ';\r\n        container.appendChild(keyElement);\r\n        var valueElement = document.createElement('span');\r\n        valueElement.textContent = cell.value.value;\r\n        container.appendChild(valueElement);\r\n        return container.outerHTML;\r\n    };\r\n    ;\r\n    PartDetailsCell.prototype.getTooltip = function (cell) { return cell.value.key + \": \" + cell.value.value; };\r\n    PartDetailsCell.prototype.isCellFoldable = function (cell) { return false; };\r\n    PartDetailsCell.prototype.isCellSelectable = function (cell) { return false; };\r\n    PartDetailsCell.prototype.isCellEditable = function (cell) {\r\n        return cell.value.isEditable ? true : false;\r\n    };\r\n    return PartDetailsCell;\r\n}(CellRendererAbstract));\r\nvar HallInventoryCell = /** @class */ (function (_super) {\r\n    __extends(HallInventoryCell, _super);\r\n    function HallInventoryCell() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    HallInventoryCell.prototype.getRenderedLabel = function (cell) { return undefined; };\r\n    ;\r\n    HallInventoryCell.prototype.getTooltip = function (cell) { return cell.value; };\r\n    HallInventoryCell.prototype.isCellFoldable = function (cell) { return false; };\r\n    HallInventoryCell.prototype.getLayout = function (cell) { return LayoutFactory.hallInventoryLayout; };\r\n    HallInventoryCell.prototype.isCellSelectable = function (cell) { return false; };\r\n    return HallInventoryCell;\r\n}(CellRendererAbstract));\r\nvar FactoryCellRenderer = /** @class */ (function (_super) {\r\n    __extends(FactoryCellRenderer, _super);\r\n    function FactoryCellRenderer() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    FactoryCellRenderer.prototype.getRenderedLabel = function (cell) { return cell.value.name; };\r\n    ;\r\n    FactoryCellRenderer.prototype.getTooltip = function (cell) { return cell.value.name; };\r\n    FactoryCellRenderer.prototype.getLayout = function (cell) { return LayoutFactory.factoryLayout; };\r\n    FactoryCellRenderer.prototype.isCellSelectable = function (cell) { return false; };\r\n    return FactoryCellRenderer;\r\n}(CellRendererAbstract));\r\n/**\r\n * Factory method for getting renderer methods for cell\r\n */\r\nvar GraphCellRenderer = /** @class */ (function () {\r\n    function GraphCellRenderer(graph) {\r\n        var _this = this;\r\n        this.mapping = {\r\n            \"part\": PartRenderer,\r\n            \"supplier\": SupplierCellRenderer,\r\n            \"defaultVertex\": DefaultVertexRenderer,\r\n            \"defaultEdge\": DefaultEdgeRenderer,\r\n            \"suppliers\": AllSupplierCell,\r\n            \"partDetails\": PartDetailsCell,\r\n            \"inventoryContainer\": HallInventoryCell,\r\n            \"factory\": FactoryCellRenderer,\r\n            \"process\": ProcessCellRenderer\r\n        };\r\n        this.getCellLabel = function (cell) {\r\n            var cellRenderer = _this.getRendererForCell(cell);\r\n            return new cellRenderer().getRenderedLabel(cell);\r\n        };\r\n        this.getCellTooltip = function (cell) {\r\n            var cellRenderer = _this.getRendererForCell(cell);\r\n            return new cellRenderer().getTooltip(cell);\r\n        };\r\n        this.isLabelClipped = function (cell) {\r\n            var cellRenderer = _this.getRendererForCell(cell);\r\n            return new cellRenderer().isLabelClipped(cell);\r\n        };\r\n        this.isCellFoldable = function (cell) {\r\n            var cellRenderer = _this.getRendererForCell(cell);\r\n            return new cellRenderer().isCellFoldable(cell);\r\n        };\r\n        this.getLayout = function (cell) {\r\n            var cellRenderer = _this.getRendererForCell(cell);\r\n            return new cellRenderer().getLayout(cell);\r\n        };\r\n        this.isCellSelectable = function (cell) {\r\n            var cellRenderer = _this.getRendererForCell(cell);\r\n            return new cellRenderer().isCellSelectable(cell);\r\n        };\r\n        this.isCellEditable = function (cell) {\r\n            var cellRenderer = _this.getRendererForCell(cell);\r\n            return new cellRenderer().isCellEditable(cell);\r\n        };\r\n        LayoutFactory.initialize(graph);\r\n    }\r\n    GraphCellRenderer.prototype.getRendererForCell = function (cell) {\r\n        if (cell && this.mapping[cell.style]) {\r\n            return this.mapping[cell.style];\r\n        }\r\n        else {\r\n            if (cell.isVertex()) {\r\n                return this.mapping[\"defaultVertex\"];\r\n            }\r\n            else {\r\n                return this.mapping[\"defaultEdge\"];\r\n            }\r\n        }\r\n    };\r\n    return GraphCellRenderer;\r\n}());\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/value_process/CellFactory.ts\n");

/***/ }),

/***/ "./src/value_process/FlexArrowShape.ts":
/*!*********************************************!*\
  !*** ./src/value_process/FlexArrowShape.ts ***!
  \*********************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _generic_mxGraphImport__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../generic/mxGraphImport */ \"./src/generic/mxGraphImport.ts\");\n\r\nvar mxCellRenderer = _generic_mxGraphImport__WEBPACK_IMPORTED_MODULE_0__[\"mxgraph\"].mxCellRenderer, mxArrowConnector = _generic_mxGraphImport__WEBPACK_IMPORTED_MODULE_0__[\"mxgraph\"].mxArrowConnector, mxUtils = _generic_mxGraphImport__WEBPACK_IMPORTED_MODULE_0__[\"mxgraph\"].mxUtils;\r\n// Generic arrow\r\nfunction FlexArrowShape() {\r\n    mxArrowConnector.call(this);\r\n    this.spacing = 0;\r\n}\r\n;\r\nmxUtils.extend(FlexArrowShape, mxArrowConnector);\r\nFlexArrowShape.prototype.defaultWidth = 10;\r\nFlexArrowShape.prototype.defaultArrowWidth = 20;\r\nFlexArrowShape.prototype.getStartArrowWidth = function () {\r\n    return this.getEdgeWidth() + mxUtils.getNumber(this.style, 'startWidth', this.defaultArrowWidth);\r\n};\r\nFlexArrowShape.prototype.getEndArrowWidth = function () {\r\n    return this.getEdgeWidth() + mxUtils.getNumber(this.style, 'endWidth', this.defaultArrowWidth);\r\n    ;\r\n};\r\nFlexArrowShape.prototype.getEdgeWidth = function () {\r\n    return mxUtils.getNumber(this.style, 'width', this.defaultWidth) + Math.max(0, this.strokewidth - 1);\r\n};\r\n// Registers the link shape\r\nmxCellRenderer.prototype.defaultShapes['flexArrow'] = FlexArrowShape;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdmFsdWVfcHJvY2Vzcy9GbGV4QXJyb3dTaGFwZS50cz8yNDA2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQWdEO0FBRWhELElBQUksY0FBYyxHQUFHLDhEQUFPLENBQUMsY0FBYyxFQUN2QyxnQkFBZ0IsR0FBRyw4REFBTyxDQUFDLGdCQUFnQixFQUMzQyxPQUFPLEdBQUcsOERBQU8sQ0FBQyxPQUFPLENBQUM7QUFFOUIsZ0JBQWdCO0FBQ2hCO0lBQ0ksZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzVCLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDO0FBQ3JCLENBQUM7QUFBQSxDQUFDO0FBQ0YsT0FBTyxDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztBQUNqRCxjQUFjLENBQUMsU0FBUyxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUM7QUFDM0MsY0FBYyxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsR0FBRyxFQUFFLENBQUM7QUFFaEQsY0FBYyxDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsR0FBRztJQUMxQyxPQUFPLElBQUksQ0FBQyxZQUFZLEVBQUUsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsWUFBWSxFQUFFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBQ3JHLENBQUMsQ0FBQztBQUVGLGNBQWMsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEdBQUc7SUFDeEMsT0FBTyxJQUFJLENBQUMsWUFBWSxFQUFFLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLFVBQVUsRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUFBLENBQUM7QUFDcEcsQ0FBQyxDQUFDO0FBRUYsY0FBYyxDQUFDLFNBQVMsQ0FBQyxZQUFZLEdBQUc7SUFDcEMsT0FBTyxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3pHLENBQUMsQ0FBQztBQUNGLDJCQUEyQjtBQUMzQixjQUFjLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsR0FBRyxjQUFjLENBQUMiLCJmaWxlIjoiLi9zcmMvdmFsdWVfcHJvY2Vzcy9GbGV4QXJyb3dTaGFwZS50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7bXhncmFwaH0gZnJvbSBcIi4uL2dlbmVyaWMvbXhHcmFwaEltcG9ydFwiXHJcblxyXG5sZXQgbXhDZWxsUmVuZGVyZXIgPSBteGdyYXBoLm14Q2VsbFJlbmRlcmVyLFxyXG4gICAgbXhBcnJvd0Nvbm5lY3RvciA9IG14Z3JhcGgubXhBcnJvd0Nvbm5lY3RvcixcclxuICAgIG14VXRpbHMgPSBteGdyYXBoLm14VXRpbHM7XHJcblxyXG4vLyBHZW5lcmljIGFycm93XHJcbmZ1bmN0aW9uIEZsZXhBcnJvd1NoYXBlKCkge1xyXG4gICAgbXhBcnJvd0Nvbm5lY3Rvci5jYWxsKHRoaXMpO1xyXG4gICAgdGhpcy5zcGFjaW5nID0gMDtcclxufTtcclxubXhVdGlscy5leHRlbmQoRmxleEFycm93U2hhcGUsIG14QXJyb3dDb25uZWN0b3IpO1xyXG5GbGV4QXJyb3dTaGFwZS5wcm90b3R5cGUuZGVmYXVsdFdpZHRoID0gMTA7XHJcbkZsZXhBcnJvd1NoYXBlLnByb3RvdHlwZS5kZWZhdWx0QXJyb3dXaWR0aCA9IDIwO1xyXG5cclxuRmxleEFycm93U2hhcGUucHJvdG90eXBlLmdldFN0YXJ0QXJyb3dXaWR0aCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiB0aGlzLmdldEVkZ2VXaWR0aCgpICsgbXhVdGlscy5nZXROdW1iZXIodGhpcy5zdHlsZSwgJ3N0YXJ0V2lkdGgnLCB0aGlzLmRlZmF1bHRBcnJvd1dpZHRoKTtcclxufTtcclxuXHJcbkZsZXhBcnJvd1NoYXBlLnByb3RvdHlwZS5nZXRFbmRBcnJvd1dpZHRoID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0RWRnZVdpZHRoKCkgKyBteFV0aWxzLmdldE51bWJlcih0aGlzLnN0eWxlLCAnZW5kV2lkdGgnLCB0aGlzLmRlZmF1bHRBcnJvd1dpZHRoKTs7XHJcbn07XHJcblxyXG5GbGV4QXJyb3dTaGFwZS5wcm90b3R5cGUuZ2V0RWRnZVdpZHRoID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIG14VXRpbHMuZ2V0TnVtYmVyKHRoaXMuc3R5bGUsICd3aWR0aCcsIHRoaXMuZGVmYXVsdFdpZHRoKSArIE1hdGgubWF4KDAsIHRoaXMuc3Ryb2tld2lkdGggLSAxKTtcclxufTtcclxuLy8gUmVnaXN0ZXJzIHRoZSBsaW5rIHNoYXBlXHJcbm14Q2VsbFJlbmRlcmVyLnByb3RvdHlwZS5kZWZhdWx0U2hhcGVzWydmbGV4QXJyb3cnXSA9IEZsZXhBcnJvd1NoYXBlOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/value_process/FlexArrowShape.ts\n");

/***/ }),

/***/ "./src/value_process/ValueProcessNodeRenderer.ts":
/*!*******************************************************!*\
  !*** ./src/value_process/ValueProcessNodeRenderer.ts ***!
  \*******************************************************/
/*! exports provided: ValueProcessDiagramRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ValueProcessDiagramRenderer\", function() { return ValueProcessDiagramRenderer; });\nvar __extends = (undefined && undefined.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/**\r\n * An abstract renderer for any given node in the value process diagram\r\n */\r\nvar NodeRenderer = /** @class */ (function () {\r\n    function NodeRenderer(parent, value, graph) {\r\n        this.parent = parent;\r\n        this.value = value;\r\n        this.graph = graph;\r\n    }\r\n    /**\r\n     * render: Renders the current node\r\n     */\r\n    NodeRenderer.prototype.render = function () {\r\n    };\r\n    return NodeRenderer;\r\n}());\r\n/**\r\n * Renderer for links in the diagram\r\n */\r\nvar LinkRenderer = /** @class */ (function (_super) {\r\n    __extends(LinkRenderer, _super);\r\n    function LinkRenderer(parent, value, graph, source, target) {\r\n        var _this = _super.call(this, parent, value, graph) || this;\r\n        _this.source = source;\r\n        _this.target = target;\r\n        return _this;\r\n    }\r\n    return LinkRenderer;\r\n}(NodeRenderer));\r\n/**\r\n * A renderer that takes care of the entire value process diagram\r\n * It firstly renders the suppliers, then the logistic centers, and finally the factory\r\n */\r\nvar ValueProcessDiagramRenderer = /** @class */ (function (_super) {\r\n    __extends(ValueProcessDiagramRenderer, _super);\r\n    function ValueProcessDiagramRenderer() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * render: Renders the entire value process diagram\r\n    */\r\n    ValueProcessDiagramRenderer.prototype.render = function () {\r\n        new AllSuppliersNodeRenderer(this.parent, this.value.suppliers, this.graph).render();\r\n        new AllLogisticCentersNodeRenderer(this.parent, this.value.logisticsCenters, this.graph).render();\r\n        new FactoryNodeRenderer(this.parent, this.value.factory, this.graph).render();\r\n        // now add the edges\r\n        new AllLinksRenderer(this.parent, this.value.transportLinks, this.graph).render();\r\n    };\r\n    return ValueProcessDiagramRenderer;\r\n}(NodeRenderer));\r\n\r\n/**\r\n * Handles rendering all of the links in the diagram\r\n */\r\nvar AllLinksRenderer = /** @class */ (function (_super) {\r\n    __extends(AllLinksRenderer, _super);\r\n    function AllLinksRenderer() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * render: Renders all of the links in the diagram\r\n     */\r\n    AllLinksRenderer.prototype.render = function () {\r\n        for (var i = 0; i < this.value.length; i++) {\r\n            var edge = this.value[i];\r\n            var source = this.graph.getModel().getCell(edge.fromId);\r\n            var target = this.graph.getModel().getCell(edge.toId);\r\n            if (edge.type == \"truck\") {\r\n                new TruckLinkRender(this.parent, edge, this.graph, source, target).render();\r\n            }\r\n        }\r\n    };\r\n    return AllLinksRenderer;\r\n}(NodeRenderer));\r\nvar TruckLinkRender = /** @class */ (function (_super) {\r\n    __extends(TruckLinkRender, _super);\r\n    function TruckLinkRender() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n      * render: Renders the truck link\r\n      */\r\n    TruckLinkRender.prototype.render = function () {\r\n        this.graph.insertEdge(this.parent, null, this.value, this.source, this.target);\r\n    };\r\n    return TruckLinkRender;\r\n}(LinkRenderer));\r\n/**\r\n * Handles rendering a given factory\r\n */\r\nvar FactoryNodeRenderer = /** @class */ (function (_super) {\r\n    __extends(FactoryNodeRenderer, _super);\r\n    function FactoryNodeRenderer() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * render: Renders the factory and the halls in it\r\n     */\r\n    FactoryNodeRenderer.prototype.render = function () {\r\n        var factoryNode = this.graph.insertVertex(this.parent, this.value.id, this.value, 0, 0, 1800, 1800, 'factory');\r\n        for (var i = 0; i < this.value.halls.length; i++) {\r\n            var factoryHall = this.value.halls[i];\r\n            new FactoryHallNodeRenderer(factoryNode, factoryHall, this.graph).render();\r\n        }\r\n    };\r\n    return FactoryNodeRenderer;\r\n}(NodeRenderer));\r\n/**\r\n * Handles rendering a given factory hall\r\n */\r\nvar FactoryHallNodeRenderer = /** @class */ (function (_super) {\r\n    __extends(FactoryHallNodeRenderer, _super);\r\n    function FactoryHallNodeRenderer() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * render: Renders the factory and the halls in it\r\n     */\r\n    FactoryHallNodeRenderer.prototype.render = function () {\r\n        var hallNode = this.graph.insertVertex(this.parent, null, this.value, 0, 0, 1800, 1800, 'supplier');\r\n        var inventoryNode = this.graph.insertVertex(hallNode, null, null, 0, 0, 0, 0, 'inventoryContainer');\r\n        // now render all the inventories\r\n        for (var i = 0; i < this.value.inventories.length; i++) {\r\n            var inventory = this.value.inventories[i];\r\n            new InventoryNodeRenderer(inventoryNode, inventory, this.graph).render();\r\n            inventory.info.push({ key: 'title', value: inventory.name });\r\n            new DataBoxRenderer(inventoryNode, inventory.info, this.graph).render();\r\n        }\r\n        // now iterate through the capabilities and add them \r\n        for (var j = 0; j < this.value.capabilities.length; j++) {\r\n            var capability = this.value.capabilities[j];\r\n            var renderer = CapabilityFactory.getCapabilityRenderer(capability.type);\r\n            new renderer(hallNode, capability.info ? capability.info : capability, this.graph).render();\r\n        }\r\n    };\r\n    return FactoryHallNodeRenderer;\r\n}(NodeRenderer));\r\n/**\r\n * Handles rendering all the logistic centers in a given diagram\r\n */\r\nvar AllLogisticCentersNodeRenderer = /** @class */ (function (_super) {\r\n    __extends(AllLogisticCentersNodeRenderer, _super);\r\n    function AllLogisticCentersNodeRenderer() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * render: Renders the an all supplier node\r\n     */\r\n    AllLogisticCentersNodeRenderer.prototype.render = function () {\r\n        var logisticCentersVertex = this.graph.insertVertex(this.parent, null, null, 0, 0, 1800, 1800, 'suppliers');\r\n        for (var i = 0; i < this.value.length; i++) {\r\n            var logisticCenter = this.value[i];\r\n            new LogisticCenterNodeRenderer(logisticCentersVertex, logisticCenter, this.graph).render();\r\n        }\r\n    };\r\n    return AllLogisticCentersNodeRenderer;\r\n}(NodeRenderer));\r\n/**\r\n * Handles rendering all the logistic centers in a given diagram\r\n */\r\nvar LogisticCenterNodeRenderer = /** @class */ (function (_super) {\r\n    __extends(LogisticCenterNodeRenderer, _super);\r\n    function LogisticCenterNodeRenderer() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * render: Renders the an all supplier node\r\n     */\r\n    LogisticCenterNodeRenderer.prototype.render = function () {\r\n        var logisticCenter = this.graph.insertVertex(this.parent, this.value.id, this.value, 0, 0, 1800, 1800, 'supplier');\r\n        // now iterate through the capabilities and add them \r\n        for (var j = 0; j < this.value.capabilities.length; j++) {\r\n            var capability = this.value.capabilities[j];\r\n            var renderer = CapabilityFactory.getCapabilityRenderer(capability.type);\r\n            new renderer(logisticCenter, capability.info ? capability.info : capability, this.graph).render();\r\n        }\r\n    };\r\n    return LogisticCenterNodeRenderer;\r\n}(NodeRenderer));\r\n/**\r\n * Handles rendering of forklift\r\n */\r\nvar ForkliftNodeRenderer = /** @class */ (function (_super) {\r\n    __extends(ForkliftNodeRenderer, _super);\r\n    function ForkliftNodeRenderer() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * render: Renders the an all supplier node\r\n     */\r\n    ForkliftNodeRenderer.prototype.render = function () {\r\n        this.graph.insertVertex(this.parent, null, { tooltip: 'Forklift' }, 0, 0, 200, 20, \"capability;shape=mxgraph.lean_mapping.move_by_forklift\");\r\n    };\r\n    return ForkliftNodeRenderer;\r\n}(NodeRenderer));\r\n/**\r\n * Handles rendering of X type cells\r\n */\r\nvar CapabilityXNodeRenderer = /** @class */ (function (_super) {\r\n    __extends(CapabilityXNodeRenderer, _super);\r\n    function CapabilityXNodeRenderer() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * render: Renders the an all supplier node\r\n     */\r\n    CapabilityXNodeRenderer.prototype.render = function () {\r\n        this.graph.insertVertex(this.parent, null, 'X', 0, 0, 200, 20, \"shape=rectangle;fontSize=18;strokeColor=black;strokeWidth=1;fillColor=transparent;spacing=6\");\r\n    };\r\n    return CapabilityXNodeRenderer;\r\n}(NodeRenderer));\r\n/**\r\n * Handles rendering of generic text type cells\r\n */\r\nvar TextNodeRenderer = /** @class */ (function (_super) {\r\n    __extends(TextNodeRenderer, _super);\r\n    function TextNodeRenderer() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * render: Renders the an all supplier node\r\n     */\r\n    TextNodeRenderer.prototype.render = function () {\r\n        this.graph.insertVertex(this.parent, null, this.value.value, 0, 0, 200, 20, \"fontSize=12;spacing=6;whiteSpace=wrap\");\r\n    };\r\n    return TextNodeRenderer;\r\n}(NodeRenderer));\r\n/**\r\n * Handles rendering of a lift\r\n */\r\nvar LiftNodeRenderer = /** @class */ (function (_super) {\r\n    __extends(LiftNodeRenderer, _super);\r\n    function LiftNodeRenderer() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * render: Renders the an all supplier node\r\n     */\r\n    LiftNodeRenderer.prototype.render = function () {\r\n        this.graph.insertVertex(this.parent, null, { tooltip: 'Lift' }, 0, 0, 200, 20, \"capability;shape=mxgraph.lean_mapping.lift\");\r\n    };\r\n    return LiftNodeRenderer;\r\n}(NodeRenderer));\r\n/**\r\n * Handles rendering of a inventoryBox\r\n */\r\nvar InventoryNodeRenderer = /** @class */ (function (_super) {\r\n    __extends(InventoryNodeRenderer, _super);\r\n    function InventoryNodeRenderer() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * render: Renders the an all supplier node\r\n     */\r\n    InventoryNodeRenderer.prototype.render = function () {\r\n        this.graph.insertVertex(this.parent, null, { tooltip: 'Inventory' }, 0, 0, 200, 20, \"capability;shape=mxgraph.lean_mapping.inventory_box\");\r\n    };\r\n    return InventoryNodeRenderer;\r\n}(NodeRenderer));\r\n/**\r\n * Handles rendering of an operator\r\n */\r\nvar OperatorNodeRenderer = /** @class */ (function (_super) {\r\n    __extends(OperatorNodeRenderer, _super);\r\n    function OperatorNodeRenderer() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * render: Renders the operator note using a custom shape\r\n     */\r\n    OperatorNodeRenderer.prototype.render = function () {\r\n        this.graph.insertVertex(this.parent, null, { tooltip: 'Operator' }, 0, 0, 200, 20, \"capability;shape=mxgraph.lean_mapping.operator\");\r\n    };\r\n    return OperatorNodeRenderer;\r\n}(NodeRenderer));\r\n/**\r\n * Handles rendering of a process\r\n */\r\nvar ProcessNodeRenderer = /** @class */ (function (_super) {\r\n    __extends(ProcessNodeRenderer, _super);\r\n    function ProcessNodeRenderer() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * render: Renders the an all supplier node\r\n     */\r\n    ProcessNodeRenderer.prototype.render = function () {\r\n        var processNode = this.graph.insertVertex(this.parent, null, this.value, 0, 0, 200, 20, \"process\");\r\n        // now iterate through the capabilities and add them \r\n        for (var j = 0; j < this.value.capabilities.length; j++) {\r\n            var capability = this.value.capabilities[j];\r\n            var renderer = CapabilityFactory.getCapabilityRenderer(capability.type);\r\n            new renderer(processNode, capability.info ? capability.info : capability, this.graph).render();\r\n        }\r\n    };\r\n    return ProcessNodeRenderer;\r\n}(NodeRenderer));\r\n/**\r\n * Handles rendering all the suppliers in a given diagram\r\n */\r\nvar AllSuppliersNodeRenderer = /** @class */ (function (_super) {\r\n    __extends(AllSuppliersNodeRenderer, _super);\r\n    function AllSuppliersNodeRenderer() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * render: Renders the an all supplier node\r\n     */\r\n    AllSuppliersNodeRenderer.prototype.render = function () {\r\n        var suppliersParent = this.graph.insertVertex(this.parent, null, null, 0, 0, 1800, 1800, 'suppliers');\r\n        for (var i = 0; i < this.value.length; i++) {\r\n            var supplier = this.value[i];\r\n            new SupplierNodeRenderer(suppliersParent, supplier, this.graph).render();\r\n        }\r\n    };\r\n    return AllSuppliersNodeRenderer;\r\n}(NodeRenderer));\r\n/**\r\n * Renders a given suppliers. First renders the supplier vertex and\r\n * then the parts inside of it\r\n */\r\nvar SupplierNodeRenderer = /** @class */ (function (_super) {\r\n    __extends(SupplierNodeRenderer, _super);\r\n    function SupplierNodeRenderer() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * render: Renders the an all supplier node\r\n     */\r\n    SupplierNodeRenderer.prototype.render = function () {\r\n        var supplierNode = this.graph.insertVertex(this.parent, this.value.id, this.value, 0, 0, 400, 300, 'supplier');\r\n        for (var j = 0; j < this.value.parts.length; j++) {\r\n            var part = this.value.parts[j];\r\n            new DataBoxRenderer(supplierNode, part, this.graph).render();\r\n        }\r\n    };\r\n    return SupplierNodeRenderer;\r\n}(NodeRenderer));\r\n/**\r\n * Handles a \"part\" in the value process diagram.\r\n * This part is rendered as a DataBox\r\n */\r\nvar DataBoxRenderer = /** @class */ (function (_super) {\r\n    __extends(DataBoxRenderer, _super);\r\n    function DataBoxRenderer() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * render: Renders the an all supplier node\r\n     */\r\n    DataBoxRenderer.prototype.render = function () {\r\n        var value = {\r\n            objectLink: undefined,\r\n            title: undefined,\r\n            id: undefined\r\n        };\r\n        for (var _i = 0, _a = this.value; _i < _a.length; _i++) {\r\n            var item = _a[_i];\r\n            if (item.key == 'title') {\r\n                value.title = item.value;\r\n            }\r\n            else if (item.key == 'objectLink') {\r\n                value.objectLink = item.value;\r\n            }\r\n            else if (item.key == 'id') {\r\n                value.id = item.value;\r\n            }\r\n        }\r\n        var partNode = this.graph.insertVertex(this.parent, value.id, value, 0, 0, 10, 300, 'part');\r\n        for (var _b = 0, _c = this.value; _b < _c.length; _b++) {\r\n            var info = _c[_b];\r\n            // and finally all of the details\r\n            if (info.value && info.key != 'id' && info.key != 'title' && info.key != 'type' && info.key != 'objectLink') {\r\n                new DataBoxItemRenderer(partNode, info, this.graph).render();\r\n            }\r\n        }\r\n    };\r\n    return DataBoxRenderer;\r\n}(NodeRenderer));\r\nvar DataBoxItemRenderer = /** @class */ (function (_super) {\r\n    __extends(DataBoxItemRenderer, _super);\r\n    function DataBoxItemRenderer() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * render: Renders the an all supplier node\r\n     */\r\n    DataBoxItemRenderer.prototype.render = function () {\r\n        this.graph.insertVertex(this.parent, null, this.value, 0, 0, 200, 20, \"partDetails\");\r\n    };\r\n    return DataBoxItemRenderer;\r\n}(NodeRenderer));\r\nvar CapabilityFactory = /** @class */ (function () {\r\n    function CapabilityFactory() {\r\n    }\r\n    CapabilityFactory.getCapabilityRenderer = function (capability) {\r\n        if (this.mapping[capability]) {\r\n            return this.mapping[capability];\r\n        }\r\n        else {\r\n            return this.mapping[\"default\"];\r\n        }\r\n    };\r\n    CapabilityFactory.mapping = {\r\n        \"forklift\": ForkliftNodeRenderer,\r\n        \"databox\": DataBoxRenderer,\r\n        \"process\": ProcessNodeRenderer,\r\n        \"operator\": OperatorNodeRenderer,\r\n        \"X\": CapabilityXNodeRenderer,\r\n        \"lift\": LiftNodeRenderer,\r\n        \"inventory\": InventoryNodeRenderer,\r\n        \"text\": TextNodeRenderer,\r\n        \"default\": NodeRenderer\r\n    };\r\n    return CapabilityFactory;\r\n}());\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/value_process/ValueProcessNodeRenderer.ts\n");

/***/ }),

/***/ "./src/value_process/mxLeanMap.ts":
/*!****************************************!*\
  !*** ./src/value_process/mxLeanMap.ts ***!
  \****************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _generic_mxGraphImport__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../generic/mxGraphImport */ \"./src/generic/mxGraphImport.ts\");\n\r\nvar mxShape = _generic_mxGraphImport__WEBPACK_IMPORTED_MODULE_0__[\"mxgraph\"].mxShape, mxUtils = _generic_mxGraphImport__WEBPACK_IMPORTED_MODULE_0__[\"mxgraph\"].mxUtils, mxCellRenderer = _generic_mxGraphImport__WEBPACK_IMPORTED_MODULE_0__[\"mxgraph\"].mxCellRenderer, mxConnectionConstraint = _generic_mxGraphImport__WEBPACK_IMPORTED_MODULE_0__[\"mxgraph\"].mxConnectionConstraint, mxPoint = _generic_mxGraphImport__WEBPACK_IMPORTED_MODULE_0__[\"mxgraph\"].mxPoint, mxConstants = _generic_mxGraphImport__WEBPACK_IMPORTED_MODULE_0__[\"mxgraph\"].mxConstants, mxArrow = _generic_mxGraphImport__WEBPACK_IMPORTED_MODULE_0__[\"mxgraph\"].mxArrow, mxRectangle = _generic_mxGraphImport__WEBPACK_IMPORTED_MODULE_0__[\"mxgraph\"].mxRectangle;\r\n/**\r\n * $Id: mxLeanMap.js,v 1.3 2013/05/30 14:19:14 mate Exp $\r\n * Copyright (c) 2006-2013, JGraph Ltd\r\n */\r\n//**********************************************************************************************************************************************************\r\n//Boat Shipment\r\n//**********************************************************************************************************************************************************\r\n/**\r\n * Extends mxShape.\r\n */\r\nfunction mxLeanBoatShipment(bounds, fill, stroke, strokewidth) {\r\n    mxShape.call(this);\r\n    this.bounds = bounds;\r\n    this.fill = fill;\r\n    this.stroke = stroke;\r\n    this.strokewidth = (strokewidth != null) ? strokewidth : 1;\r\n}\r\n;\r\n/**\r\n * Extends mxShape.\r\n */\r\nmxUtils.extend(mxLeanBoatShipment, mxShape);\r\n/**\r\n * Function: paintVertexShape\r\n *\r\n * Paints the vertex shape.\r\n */\r\nmxLeanBoatShipment.prototype.paintVertexShape = function (c, x, y, w, h) {\r\n    c.translate(x, y);\r\n    c.begin();\r\n    c.moveTo(w * 0.15, h * 0.77);\r\n    c.lineTo(w * 0.5, 0);\r\n    c.lineTo(w * 0.85, h * 0.77);\r\n    c.close();\r\n    c.moveTo(w * 0.2, h);\r\n    c.lineTo(0, h * 0.8);\r\n    c.lineTo(w, h * 0.8);\r\n    c.lineTo(w * 0.8, h);\r\n    c.close();\r\n    c.fillAndStroke();\r\n};\r\nmxCellRenderer.registerShape('mxgraph.lean_mapping.boat_shipment', mxLeanBoatShipment);\r\nmxLeanBoatShipment.prototype.constraints = [\r\n    new mxConnectionConstraint(new mxPoint(0.5, 0), false),\r\n    new mxConnectionConstraint(new mxPoint(0.5, 1), false),\r\n    new mxConnectionConstraint(new mxPoint(0, 0.8), false),\r\n    new mxConnectionConstraint(new mxPoint(1, 0.8), false),\r\n    new mxConnectionConstraint(new mxPoint(0.2, 1), false),\r\n    new mxConnectionConstraint(new mxPoint(0.8, 1), false),\r\n    new mxConnectionConstraint(new mxPoint(0.26, 0.5), false),\r\n    new mxConnectionConstraint(new mxPoint(0.74, 0.5), false)\r\n];\r\n//**********************************************************************************************************************************************************\r\n//Safety Stock\r\n//**********************************************************************************************************************************************************\r\n/**\r\n * Extends mxShape.\r\n */\r\nfunction mxLeanSafetyStock(bounds, fill, stroke, strokewidth) {\r\n    mxShape.call(this);\r\n    this.bounds = bounds;\r\n    this.fill = fill;\r\n    this.stroke = stroke;\r\n    this.strokewidth = (strokewidth != null) ? strokewidth : 1;\r\n}\r\n;\r\n/**\r\n * Extends mxShape.\r\n */\r\nmxUtils.extend(mxLeanSafetyStock, mxShape);\r\n/**\r\n * Function: paintVertexShape\r\n *\r\n * Paints the vertex shape.\r\n */\r\nmxLeanSafetyStock.prototype.paintVertexShape = function (c, x, y, w, h) {\r\n    c.translate(x, y);\r\n    this.background(c, w, h);\r\n    c.setShadow(false);\r\n    this.foreground(c, w, h);\r\n};\r\nmxLeanSafetyStock.prototype.background = function (c, w, h) {\r\n    c.rect(0, 0, w, h);\r\n    c.fillAndStroke();\r\n};\r\nmxLeanSafetyStock.prototype.foreground = function (c, w, h) {\r\n    c.begin();\r\n    c.moveTo(0, h * 0.34);\r\n    c.lineTo(w, h * 0.34);\r\n    c.moveTo(0, h * 0.66);\r\n    c.lineTo(w, h * 0.66);\r\n    c.fillAndStroke();\r\n};\r\nmxCellRenderer.registerShape('mxgraph.lean_mapping.buffer_or_safety_stock', mxLeanSafetyStock);\r\nmxLeanSafetyStock.prototype.constraints = [\r\n    new mxConnectionConstraint(new mxPoint(0, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(0.25, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0.5, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0.75, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 0.25), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 0.5), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 0.75), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 0.25), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 0.5), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 0.75), true),\r\n    new mxConnectionConstraint(new mxPoint(0.25, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(0.5, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(0.75, 1), true)\r\n];\r\n//**********************************************************************************************************************************************************\r\n//Data Box\r\n//**********************************************************************************************************************************************************\r\n/**\r\n * Extends mxShape.\r\n */\r\nfunction mxLeanDataBox(bounds, fill, stroke, strokewidth) {\r\n    mxShape.call(this);\r\n    this.bounds = bounds;\r\n    this.fill = fill;\r\n    this.stroke = stroke;\r\n    this.strokewidth = (strokewidth != null) ? strokewidth : 1;\r\n}\r\n;\r\n/**\r\n * Extends mxShape.\r\n */\r\nmxUtils.extend(mxLeanDataBox, mxShape);\r\n/**\r\n * Function: paintVertexShape\r\n *\r\n * Paints the vertex shape.\r\n */\r\nmxLeanDataBox.prototype.paintVertexShape = function (c, x, y, w, h) {\r\n    c.translate(x, y);\r\n    this.background(c, w, h);\r\n    c.setShadow(false);\r\n    this.foreground(c, w, h);\r\n};\r\nmxLeanDataBox.prototype.background = function (c, w, h) {\r\n    c.begin();\r\n    c.moveTo(0, h);\r\n    c.lineTo(0, 0);\r\n    c.lineTo(w, 0);\r\n    c.lineTo(w, h);\r\n    c.fillAndStroke();\r\n};\r\nmxLeanDataBox.prototype.foreground = function (c, w, h) {\r\n    c.begin();\r\n    c.moveTo(0, h * 0.2);\r\n    c.lineTo(w, h * 0.2);\r\n    c.moveTo(0, h * 0.4);\r\n    c.lineTo(w, h * 0.4);\r\n    c.moveTo(0, h * 0.6);\r\n    c.lineTo(w, h * 0.6);\r\n    c.moveTo(0, h * 0.8);\r\n    c.lineTo(w, h * 0.8);\r\n    c.stroke();\r\n};\r\nmxCellRenderer.registerShape('mxgraph.lean_mapping.data_box', mxLeanDataBox);\r\nmxLeanDataBox.prototype.constraints = [\r\n    new mxConnectionConstraint(new mxPoint(0, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(0.25, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0.5, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0.75, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 0.25), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 0.5), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 0.75), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 0.25), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 0.5), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 0.75), true),\r\n    new mxConnectionConstraint(new mxPoint(0.25, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(0.5, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(0.75, 1), true)\r\n];\r\n//**********************************************************************************************************************************************************\r\n//Customer / Supplier\r\n//**********************************************************************************************************************************************************\r\n/**\r\n * Extends mxShape.\r\n */\r\nfunction mxLeanCustomerSupplier(bounds, fill, stroke, strokewidth) {\r\n    mxShape.call(this);\r\n    this.bounds = bounds;\r\n    this.fill = fill;\r\n    this.stroke = stroke;\r\n    this.strokewidth = (strokewidth != null) ? strokewidth : 1;\r\n}\r\n;\r\n/**\r\n * Extends mxShape.\r\n */\r\nmxUtils.extend(mxLeanCustomerSupplier, mxShape);\r\n/**\r\n * Function: paintVertexShape\r\n *\r\n * Paints the vertex shape.\r\n */\r\nmxLeanCustomerSupplier.prototype.paintVertexShape = function (c, x, y, w, h) {\r\n    c.translate(x, y);\r\n    this.background(c, w, h);\r\n    c.setShadow(false);\r\n};\r\nmxLeanCustomerSupplier.prototype.background = function (c, w, h) {\r\n    c.begin();\r\n    c.moveTo(0, h);\r\n    // we don't want the header to expand forever;\r\n    var clampedHeight = Math.min(h * 0.3, this.maxSawToothHeight);\r\n    c.lineTo(0, clampedHeight);\r\n    c.lineTo(w * 0.33, 0);\r\n    c.lineTo(w * 0.33, clampedHeight);\r\n    c.lineTo(w * 0.67, 0);\r\n    c.lineTo(w * 0.67, clampedHeight);\r\n    c.lineTo(w, 0);\r\n    c.lineTo(w, h);\r\n    c.close();\r\n    c.fillAndStroke();\r\n};\r\nmxLeanCustomerSupplier.prototype.getControlBounds = function (originalValue, w, h) {\r\n    var clampedHeight = Math.min(this.bounds.height * 0.25, this.maxSawToothHeight - 5) * this.scale;\r\n    return new mxRectangle(originalValue.x, originalValue.y + clampedHeight, originalValue.width, originalValue.height);\r\n};\r\nmxLeanCustomerSupplier.prototype.getLabelBounds = function (rect) {\r\n    var clampedHeight = Math.min(rect.height * 0.3, this.maxSawToothHeight) * this.scale;\r\n    return new mxRectangle(rect.x, rect.y + clampedHeight, rect.width, 30);\r\n};\r\nmxLeanCustomerSupplier.prototype.getGradientBounds = function (c, x, y, w, h) {\r\n    var clampedHeight = Math.min(h * 0.3, this.maxSawToothHeight) * this.scale;\r\n    return new mxRectangle(x, y + clampedHeight + 30, w, h - clampedHeight - 30);\r\n};\r\nmxLeanCustomerSupplier.prototype.maxSawToothHeight = 50;\r\nmxCellRenderer.registerShape('mxgraph.lean_mapping.outside_sources', mxLeanCustomerSupplier);\r\nmxLeanCustomerSupplier.prototype.constraints = [\r\n    new mxConnectionConstraint(new mxPoint(1, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(0.33, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0.67, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 0.3), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 0.5), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 0.75), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 0.25), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 0.5), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 0.75), true),\r\n    new mxConnectionConstraint(new mxPoint(0.25, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(0.5, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(0.75, 1), true)\r\n];\r\n//**********************************************************************************************************************************************************\r\n//Dedicated Process\r\n//**********************************************************************************************************************************************************\r\n/**\r\n * Extends mxShape.\r\n */\r\nfunction mxLeanDedicatedProcess(bounds, fill, stroke, strokewidth) {\r\n    mxShape.call(this);\r\n    this.bounds = bounds;\r\n    this.fill = fill;\r\n    this.stroke = stroke;\r\n    this.strokewidth = (strokewidth != null) ? strokewidth : 1;\r\n}\r\n;\r\n/**\r\n * Extends mxShape.\r\n */\r\nmxUtils.extend(mxLeanDedicatedProcess, mxShape);\r\n/**\r\n * Function: paintVertexShape\r\n *\r\n * Paints the vertex shape.\r\n */\r\nmxLeanDedicatedProcess.prototype.paintVertexShape = function (c, x, y, w, h) {\r\n    c.translate(x, y);\r\n    var fontSize = parseFloat(mxUtils.getValue(this.style, mxConstants.STYLE_FONTSIZE, '8'));\r\n    this.background(c, w, h);\r\n    c.setShadow(false);\r\n    this.foreground(c, w, h, fontSize);\r\n};\r\nmxLeanDedicatedProcess.prototype.background = function (c, w, h) {\r\n    c.rect(0, 0, w, h);\r\n    c.fillAndStroke();\r\n};\r\nmxLeanDedicatedProcess.prototype.foreground = function (c, w, h, fontSize) {\r\n    var lineH = Math.min(fontSize * 1.5, h);\r\n    c.begin();\r\n    c.moveTo(0, lineH);\r\n    c.lineTo(w, lineH);\r\n    c.stroke();\r\n};\r\nmxCellRenderer.registerShape('mxgraph.lean_mapping.manufacturing_process', mxLeanDedicatedProcess);\r\nmxLeanDedicatedProcess.prototype.constraints = [\r\n    new mxConnectionConstraint(new mxPoint(0, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(0.25, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0.5, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0.75, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 0.25), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 0.5), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 0.75), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 0.25), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 0.5), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 0.75), true),\r\n    new mxConnectionConstraint(new mxPoint(0.25, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(0.5, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(0.75, 1), true)\r\n];\r\n//**********************************************************************************************************************************************************\r\n//Shared Process\r\n//**********************************************************************************************************************************************************\r\n/**\r\n * Extends mxShape.\r\n */\r\nfunction mxLeanSharedProcess(bounds, fill, stroke, strokewidth) {\r\n    mxShape.call(this);\r\n    this.bounds = bounds;\r\n    this.fill = fill;\r\n    this.stroke = stroke;\r\n    this.strokewidth = (strokewidth != null) ? strokewidth : 1;\r\n}\r\n;\r\n/**\r\n * Extends mxShape.\r\n */\r\nmxUtils.extend(mxLeanSharedProcess, mxShape);\r\n/**\r\n * Function: paintVertexShape\r\n *\r\n * Paints the vertex shape.\r\n */\r\nmxLeanSharedProcess.prototype.paintVertexShape = function (c, x, y, w, h) {\r\n    c.translate(x, y);\r\n    var fontSize = parseFloat(mxUtils.getValue(this.style, mxConstants.STYLE_FONTSIZE, '8'));\r\n    this.background(c, w, h);\r\n    c.setShadow(false);\r\n    this.foreground(c, w, h, fontSize);\r\n};\r\nmxLeanSharedProcess.prototype.background = function (c, w, h) {\r\n    c.rect(0, 0, w, h);\r\n    c.fillAndStroke();\r\n};\r\nmxLeanSharedProcess.prototype.foreground = function (c, w, h, fontSize) {\r\n    var lineH = Math.min(fontSize * 1.5, h);\r\n    c.begin();\r\n    c.moveTo(0, lineH);\r\n    c.lineTo(w, lineH);\r\n    c.stroke();\r\n    var start = 0;\r\n    var i = 0;\r\n    var s = 10;\r\n    var offset = 0;\r\n    c.begin();\r\n    var strokeWidth = parseFloat(mxUtils.getValue(this.style, mxConstants.STYLE_STROKEWIDTH, '2'));\r\n    c.setStrokeWidth(strokeWidth * 0.5);\r\n    while (start < h + w) {\r\n        start = start + s;\r\n        if (start > lineH) {\r\n            var startX = Math.max(0, start - h);\r\n            var startY = Math.min(start, h);\r\n            var endX = Math.min(start - lineH, w);\r\n            var endY = lineH;\r\n            var endY = Math.max(start - w, lineH);\r\n            if (startX < w) {\r\n                c.moveTo(startX, startY);\r\n                c.lineTo(endX, endY);\r\n            }\r\n        }\r\n    }\r\n    ;\r\n    c.stroke();\r\n};\r\nmxCellRenderer.registerShape('mxgraph.lean_mapping.manufacturing_process_shared', mxLeanSharedProcess);\r\nmxLeanSharedProcess.prototype.constraints = [\r\n    new mxConnectionConstraint(new mxPoint(0, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(0.25, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0.5, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0.75, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 0.25), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 0.5), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 0.75), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 0.25), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 0.5), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 0.75), true),\r\n    new mxConnectionConstraint(new mxPoint(0.25, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(0.5, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(0.75, 1), true)\r\n];\r\n//**********************************************************************************************************************************************************\r\n// Workcell\r\n//**********************************************************************************************************************************************************\r\n/**\r\n* Extends mxShape.\r\n*/\r\nfunction mxLeanWorkcell(bounds, fill, stroke, strokewidth) {\r\n    mxShape.call(this);\r\n    this.bounds = bounds;\r\n    this.fill = fill;\r\n    this.stroke = stroke;\r\n    this.strokewidth = (strokewidth != null) ? strokewidth : 1;\r\n}\r\n;\r\n/**\r\n* Extends mxShape.\r\n*/\r\nmxUtils.extend(mxLeanWorkcell, mxShape);\r\n/**\r\n* Function: paintVertexShape\r\n*\r\n* Paints the vertex shape.\r\n*/\r\nmxLeanWorkcell.prototype.paintVertexShape = function (c, x, y, w, h) {\r\n    c.translate(x, y);\r\n    c.begin();\r\n    c.moveTo(0, 0);\r\n    c.lineTo(w, 0);\r\n    c.lineTo(w, h);\r\n    c.lineTo(w * 0.65, h);\r\n    c.lineTo(w * 0.65, h * 0.4);\r\n    c.lineTo(w * 0.35, h * 0.4);\r\n    c.lineTo(w * 0.35, h);\r\n    c.lineTo(0, h);\r\n    c.close();\r\n    c.fillAndStroke();\r\n};\r\nmxCellRenderer.registerShape('mxgraph.lean_mapping.work_cell', mxLeanWorkcell);\r\nmxLeanWorkcell.prototype.constraints = [\r\n    new mxConnectionConstraint(new mxPoint(0, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(0.25, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0.5, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0.75, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 0.25), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 0.5), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 0.75), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 0.25), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 0.5), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 0.75), true),\r\n    new mxConnectionConstraint(new mxPoint(0.25, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(0.75, 1), true)\r\n];\r\n//**********************************************************************************************************************************************************\r\n//Inventory Box\r\n//**********************************************************************************************************************************************************\r\n/**\r\n* Extends mxShape.\r\n*/\r\nfunction mxLeanInventoryBox(bounds, fill, stroke, strokewidth) {\r\n    mxShape.call(this);\r\n    this.bounds = bounds;\r\n    this.fill = fill;\r\n    this.stroke = stroke;\r\n    this.strokewidth = (strokewidth != null) ? strokewidth : 1;\r\n}\r\n;\r\n/**\r\n* Extends mxShape.\r\n*/\r\nmxUtils.extend(mxLeanInventoryBox, mxShape);\r\n/**\r\n* Function: paintVertexShape\r\n*\r\n* Paints the vertex shape.\r\n*/\r\nmxLeanInventoryBox.prototype.paintVertexShape = function (c, x, y, w, h) {\r\n    c.translate(x, y);\r\n    c.begin();\r\n    c.moveTo(0, h);\r\n    c.lineTo(w * 0.5, 0);\r\n    c.lineTo(w, h);\r\n    c.close();\r\n    c.fillAndStroke();\r\n    c.setShadow(false);\r\n    c.begin();\r\n    c.moveTo(w * 0.4, h * 0.45);\r\n    c.lineTo(w * 0.6, h * 0.45);\r\n    c.moveTo(w * 0.5, h * 0.45);\r\n    c.lineTo(w * 0.5, h * 0.85);\r\n    c.moveTo(w * 0.4, h * 0.85);\r\n    c.lineTo(w * 0.6, h * 0.85);\r\n    c.stroke();\r\n};\r\nmxCellRenderer.registerShape('mxgraph.lean_mapping.inventory_box', mxLeanInventoryBox);\r\nmxLeanInventoryBox.prototype.constraints = [\r\n    new mxConnectionConstraint(new mxPoint(0, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(0.5, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0.375, 0.25), false),\r\n    new mxConnectionConstraint(new mxPoint(0.25, 0.5), false),\r\n    new mxConnectionConstraint(new mxPoint(0.125, 0.75), false),\r\n    new mxConnectionConstraint(new mxPoint(0.625, 0.25), false),\r\n    new mxConnectionConstraint(new mxPoint(0.75, 0.5), false),\r\n    new mxConnectionConstraint(new mxPoint(0.875, 0.75), false),\r\n    new mxConnectionConstraint(new mxPoint(0.25, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(0.5, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(0.75, 1), true)\r\n];\r\n//**********************************************************************************************************************************************************\r\n//Push Arrow\r\n//**********************************************************************************************************************************************************\r\n/**\r\n* Extends mxShape.\r\n*/\r\nfunction mxLeanPushArrow(bounds, fill, stroke, strokewidth) {\r\n    mxShape.call(this);\r\n    this.bounds = bounds;\r\n    this.fill = fill;\r\n    this.stroke = stroke;\r\n    this.strokewidth = (strokewidth != null) ? strokewidth : 1;\r\n}\r\n;\r\n/**\r\n* Extends mxShape.\r\n*/\r\nmxUtils.extend(mxLeanPushArrow, mxShape);\r\n/**\r\n* Function: paintVertexShape\r\n*\r\n* Paints the vertex shape.\r\n*/\r\nmxLeanPushArrow.prototype.paintVertexShape = function (c, x, y, w, h) {\r\n    c.translate(x, y);\r\n    this.background(c, w, h);\r\n    c.setShadow(false);\r\n    this.foreground(c, w, h);\r\n};\r\nmxLeanPushArrow.prototype.background = function (c, w, h) {\r\n    c.begin();\r\n    c.moveTo(0, h * 0.17);\r\n    c.lineTo(w * 0.75, h * 0.17);\r\n    c.lineTo(w * 0.75, 0);\r\n    c.lineTo(w, h * 0.5);\r\n    c.lineTo(w * 0.75, h);\r\n    c.lineTo(w * 0.75, h * 0.83);\r\n    c.lineTo(0, h * 0.83);\r\n    c.close();\r\n    c.fillAndStroke();\r\n};\r\nmxLeanPushArrow.prototype.foreground = function (c, w, h, fontSize) {\r\n    var strokeColor = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, '#000000');\r\n    c.setFillColor(strokeColor);\r\n    c.rect(0, h * 0.17, w * 0.12, h * 0.66);\r\n    c.fill();\r\n    c.rect(w * 0.24, h * 0.17, w * 0.12, h * 0.66);\r\n    c.fill();\r\n    c.rect(w * 0.48, h * 0.17, w * 0.12, h * 0.66);\r\n    c.fill();\r\n    c.begin();\r\n    c.moveTo(w * 0.72, h * 0.17);\r\n    c.lineTo(w * 0.75, h * 0.17);\r\n    c.lineTo(w * 0.75, 0);\r\n    c.lineTo(w, h * 0.5);\r\n    c.lineTo(w * 0.75, h);\r\n    c.lineTo(w * 0.75, h * 0.83);\r\n    c.lineTo(w * 0.72, h * 0.83);\r\n    c.close();\r\n    c.fill();\r\n};\r\nmxCellRenderer.registerShape('mxgraph.lean_mapping.push_arrow', mxLeanPushArrow);\r\nmxLeanPushArrow.prototype.constraints = [\r\n    new mxConnectionConstraint(new mxPoint(0.25, 0.17), false),\r\n    new mxConnectionConstraint(new mxPoint(0.5, 0.17), false),\r\n    new mxConnectionConstraint(new mxPoint(0.75, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 0.17), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 0.5), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 0.83), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 0.5), true),\r\n    new mxConnectionConstraint(new mxPoint(0.25, 0.83), false),\r\n    new mxConnectionConstraint(new mxPoint(0.5, 0.83), false),\r\n    new mxConnectionConstraint(new mxPoint(0.75, 1), true)\r\n];\r\n//**********************************************************************************************************************************************************\r\n//Supermarket\r\n//**********************************************************************************************************************************************************\r\n/**\r\n* Extends mxShape.\r\n*/\r\nfunction mxLeanSupermarket(bounds, fill, stroke, strokewidth) {\r\n    mxShape.call(this);\r\n    this.bounds = bounds;\r\n    this.fill = fill;\r\n    this.stroke = stroke;\r\n    this.strokewidth = (strokewidth != null) ? strokewidth : 1;\r\n}\r\n;\r\n/**\r\n* Extends mxShape.\r\n*/\r\nmxUtils.extend(mxLeanSupermarket, mxShape);\r\n/**\r\n* Function: paintVertexShape\r\n*\r\n* Paints the vertex shape.\r\n*/\r\nmxLeanSupermarket.prototype.paintVertexShape = function (c, x, y, w, h) {\r\n    c.translate(x, y);\r\n    c.begin();\r\n    c.moveTo(0, 0);\r\n    c.lineTo(w, 0);\r\n    c.lineTo(w, h);\r\n    c.lineTo(0, h);\r\n    c.moveTo(0, h * 0.33);\r\n    c.lineTo(w, h * 0.33);\r\n    c.moveTo(0, h * 0.67);\r\n    c.lineTo(w, h * 0.67);\r\n    c.fillAndStroke();\r\n};\r\nmxCellRenderer.registerShape('mxgraph.lean_mapping.supermarket', mxLeanSupermarket);\r\nmxLeanSupermarket.prototype.constraints = [\r\n    new mxConnectionConstraint(new mxPoint(0, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(0.25, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0.5, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0.75, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 0.25), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 0.5), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 0.75), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 0.25), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 0.5), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 0.75), true),\r\n    new mxConnectionConstraint(new mxPoint(0.25, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(0.5, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(0.75, 1), true)\r\n];\r\n//**********************************************************************************************************************************************************\r\n//Material Pull\r\n//**********************************************************************************************************************************************************\r\n/**\r\n* Extends mxShape.\r\n*/\r\nfunction mxLeanMaterialPull(bounds, fill, stroke, strokewidth) {\r\n    mxShape.call(this);\r\n    this.bounds = bounds;\r\n    this.fill = fill;\r\n    this.stroke = stroke;\r\n    this.strokewidth = (strokewidth != null) ? strokewidth : 1;\r\n}\r\n;\r\n/**\r\n* Extends mxShape.\r\n*/\r\nmxUtils.extend(mxLeanMaterialPull, mxShape);\r\n/**\r\n* Function: paintVertexShape\r\n*\r\n* Paints the vertex shape.\r\n*/\r\nmxLeanMaterialPull.prototype.paintVertexShape = function (c, x, y, w, h) {\r\n    c.translate(x, y);\r\n    c.begin();\r\n    c.moveTo(w * 0.732, h * 0.0736);\r\n    c.arcTo(w * 0.4827, h * 0.4959, 0, 1, 0, w * 0.9553, h * 0.6191);\r\n    c.stroke();\r\n    c.begin();\r\n    c.moveTo(w * 0.9071, h * 0.6191);\r\n    c.lineTo(w * 0.9794, h * 0.4951);\r\n    c.lineTo(w, h * 0.6438);\r\n    c.close();\r\n    c.fillAndStroke();\r\n};\r\nmxCellRenderer.registerShape('mxgraph.lean_mapping.physical_pull', mxLeanMaterialPull);\r\nmxLeanMaterialPull.prototype.constraints = [\r\n    new mxConnectionConstraint(new mxPoint(0.5, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0.5, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 0.5), true),\r\n    new mxConnectionConstraint(new mxPoint(0.98, 0.5), true),\r\n    new mxConnectionConstraint(new mxPoint(0.144, 0.144), false),\r\n    new mxConnectionConstraint(new mxPoint(0.144, 0.845), false),\r\n    new mxConnectionConstraint(new mxPoint(0.845, 0.845), false)\r\n];\r\n//**********************************************************************************************************************************************************\r\n//FIFO Lane\r\n//**********************************************************************************************************************************************************\r\n/**\r\n* Extends mxShape.\r\n*/\r\nfunction mxLeanFifoLane(bounds, fill, stroke, strokewidth) {\r\n    mxShape.call(this);\r\n    this.bounds = bounds;\r\n    this.fill = fill;\r\n    this.stroke = stroke;\r\n    this.strokewidth = (strokewidth != null) ? strokewidth : 1;\r\n}\r\n;\r\n/**\r\n* Extends mxShape.\r\n*/\r\nmxUtils.extend(mxLeanFifoLane, mxShape);\r\n/**\r\n* Function: paintVertexShape\r\n*\r\n* Paints the vertex shape.\r\n*/\r\nmxLeanFifoLane.prototype.paintVertexShape = function (c, x, y, w, h) {\r\n    c.translate(x, y);\r\n    var fontSize = parseFloat(mxUtils.getValue(this.style, mxConstants.STYLE_FONTSIZE, '8'));\r\n    this.background(c, w, h, fontSize);\r\n    c.setShadow(false);\r\n};\r\nmxLeanFifoLane.prototype.background = function (c, w, h, fontSize) {\r\n    var lineH = Math.min(fontSize * 1.5, h);\r\n    c.begin();\r\n    c.moveTo(0, lineH);\r\n    c.lineTo(w, lineH);\r\n    c.moveTo(0, h);\r\n    c.lineTo(w, h);\r\n    c.stroke();\r\n    c.rect(w * 0.02, lineH + 4, w * 0.26, h - lineH - 8);\r\n    c.fillAndStroke();\r\n    c.ellipse(w * 0.35, lineH + 4, w * 0.26, h - lineH - 8);\r\n    c.fillAndStroke();\r\n    c.begin();\r\n    c.moveTo(w * 0.69, lineH + 4);\r\n    c.lineTo(w * 0.98, lineH + 4);\r\n    c.lineTo(w * 0.835, h - 4);\r\n    c.close();\r\n    c.fillAndStroke();\r\n};\r\nmxCellRenderer.registerShape('mxgraph.lean_mapping.fifo_lane', mxLeanFifoLane);\r\nmxLeanFifoLane.prototype.constraints = [\r\n    new mxConnectionConstraint(new mxPoint(0, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(0.5, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 0.25), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 0.5), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 0.75), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 0.25), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 0.5), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 0.75), true),\r\n    new mxConnectionConstraint(new mxPoint(0.25, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(0.5, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(0.75, 1), true)\r\n];\r\n//**********************************************************************************************************************************************************\r\n//Truck Shipment\r\n//**********************************************************************************************************************************************************\r\n/**\r\n* Extends mxShape.\r\n*/\r\nfunction mxLeanTruckShipment(bounds, fill, stroke, strokewidth) {\r\n    mxShape.call(this);\r\n    this.bounds = bounds;\r\n    this.fill = fill;\r\n    this.stroke = stroke;\r\n    this.strokewidth = (strokewidth != null) ? strokewidth : 1;\r\n}\r\n;\r\n/**\r\n* Extends mxShape.\r\n*/\r\nmxUtils.extend(mxLeanTruckShipment, mxShape);\r\n/**\r\n* Function: paintVertexShape\r\n*\r\n* Paints the vertex shape.\r\n*/\r\nmxLeanTruckShipment.prototype.paintVertexShape = function (c, x, y, w, h) {\r\n    c.translate(x, y);\r\n    this.background(c, w, h);\r\n    c.setShadow(false);\r\n};\r\nmxLeanTruckShipment.prototype.background = function (c, w, h) {\r\n    c.rect(0, 0, w * 0.6, h * 0.8);\r\n    c.fillAndStroke();\r\n    c.rect(w * 0.6, h * 0.35, w * 0.4, h * 0.45);\r\n    c.fillAndStroke();\r\n    var strokeColor = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, '#000000');\r\n    c.setFillColor(strokeColor);\r\n    c.ellipse(w * 0.15, h * 0.8, w * 0.2, h * 0.2);\r\n    c.fillAndStroke();\r\n    c.ellipse(w * 0.65, h * 0.8, w * 0.2, h * 0.2);\r\n    c.fillAndStroke();\r\n};\r\nmxCellRenderer.registerShape('mxgraph.lean_mapping.truck_shipment', mxLeanTruckShipment);\r\nmxLeanTruckShipment.prototype.constraints = [\r\n    new mxConnectionConstraint(new mxPoint(0, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0.25, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0.5, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 0.25), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 0.5), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 0.75), true),\r\n    new mxConnectionConstraint(new mxPoint(0.6, 0.35), false),\r\n    new mxConnectionConstraint(new mxPoint(1, 0.5), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 0.75), true),\r\n    new mxConnectionConstraint(new mxPoint(0.25, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(0.5, 0.8), false),\r\n    new mxConnectionConstraint(new mxPoint(0.75, 1), true)\r\n];\r\n//**********************************************************************************************************************************************************\r\n//Production Control\r\n//**********************************************************************************************************************************************************\r\n/**\r\n* Extends mxShape.\r\n*/\r\nfunction mxLeanProductionControl(bounds, fill, stroke, strokewidth) {\r\n    mxShape.call(this);\r\n    this.bounds = bounds;\r\n    this.fill = fill;\r\n    this.stroke = stroke;\r\n    this.strokewidth = (strokewidth != null) ? strokewidth : 1;\r\n}\r\n;\r\n/**\r\n* Extends mxShape.\r\n*/\r\nmxUtils.extend(mxLeanProductionControl, mxShape);\r\n/**\r\n* Function: paintVertexShape\r\n*\r\n* Paints the vertex shape.\r\n*/\r\nmxLeanProductionControl.prototype.paintVertexShape = function (c, x, y, w, h) {\r\n    c.translate(x, y);\r\n    c.rect(0, 0, w, h);\r\n    c.fillAndStroke();\r\n};\r\nmxCellRenderer.registerShape('mxgraph.lean_mapping.schedule', mxLeanProductionControl);\r\nmxLeanProductionControl.prototype.constraints = [\r\n    new mxConnectionConstraint(new mxPoint(0, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(0.25, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0.5, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0.75, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 0.25), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 0.5), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 0.75), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 0.25), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 0.5), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 0.75), true),\r\n    new mxConnectionConstraint(new mxPoint(0.25, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(0.5, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(0.75, 1), true)\r\n];\r\n//**********************************************************************************************************************************************************\r\n//FIFO Sequence\r\n//**********************************************************************************************************************************************************\r\n/**\r\n* Extends mxShape.\r\n*/\r\nfunction mxLeanFifoSequence(bounds, fill, stroke, strokewidth) {\r\n    mxShape.call(this);\r\n    this.bounds = bounds;\r\n    this.fill = fill;\r\n    this.stroke = stroke;\r\n    this.strokewidth = (strokewidth != null) ? strokewidth : 1;\r\n}\r\n;\r\n/**\r\n* Extends mxShape.\r\n*/\r\nmxUtils.extend(mxLeanFifoSequence, mxShape);\r\n/**\r\n* Function: paintVertexShape\r\n*\r\n* Paints the vertex shape.\r\n*/\r\nmxLeanFifoSequence.prototype.paintVertexShape = function (c, x, y, w, h) {\r\n    c.translate(x, y);\r\n    c.begin();\r\n    c.moveTo(0, 0);\r\n    c.lineTo(w, 0);\r\n    c.moveTo(0, h);\r\n    c.lineTo(w, h);\r\n    c.moveTo(w * 0.05, h * 0.5);\r\n    c.lineTo(w * 0.15, h * 0.5);\r\n    c.moveTo(w * 0.75, h * 0.5);\r\n    c.lineTo(w * 0.88, h * 0.5);\r\n    c.stroke();\r\n    var strokeColor = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, '#000000');\r\n    c.setFillColor(strokeColor);\r\n    c.begin();\r\n    c.moveTo(w * 0.88, h * 0.39);\r\n    c.lineTo(w * 0.98, h * 0.5);\r\n    c.lineTo(w * 0.88, h * 0.61);\r\n    c.fillAndStroke();\r\n    //\tc.setFontSize(Math.min(h * 0.5, w * 0.2));\r\n    //\tc.setFontColor(strokeColor);\r\n    //\tc.text(w * 0.5, h * 0.5, 0, 0, 'FIFO', mxConstants.ALIGN_CENTER, mxConstants.ALIGN_MIDDLE, 0, null, 0, 0, 0);\r\n};\r\nmxCellRenderer.registerShape('mxgraph.lean_mapping.fifo_sequence_flow', mxLeanFifoSequence);\r\nmxLeanFifoSequence.prototype.constraints = [\r\n    new mxConnectionConstraint(new mxPoint(0, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(0.25, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0.5, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0.75, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 0.5), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 0.5), true),\r\n    new mxConnectionConstraint(new mxPoint(0.25, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(0.5, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(0.75, 1), true)\r\n];\r\n//**********************************************************************************************************************************************************\r\n//Production Kanban\r\n//**********************************************************************************************************************************************************\r\n/**\r\n* Extends mxShape.\r\n*/\r\nfunction mxLeanProductionKanban(bounds, fill, stroke, strokewidth) {\r\n    mxShape.call(this);\r\n    this.bounds = bounds;\r\n    this.fill = fill;\r\n    this.stroke = stroke;\r\n    this.strokewidth = (strokewidth != null) ? strokewidth : 1;\r\n}\r\n;\r\n/**\r\n* Extends mxShape.\r\n*/\r\nmxUtils.extend(mxLeanProductionKanban, mxShape);\r\n/**\r\n* Function: paintVertexShape\r\n*\r\n* Paints the vertex shape.\r\n*/\r\nmxLeanProductionKanban.prototype.paintVertexShape = function (c, x, y, w, h) {\r\n    c.translate(x, y);\r\n    c.setDashed(true);\r\n    c.begin();\r\n    c.moveTo(4, h - 10);\r\n    c.lineTo(4, 25);\r\n    c.lineTo(w, 25);\r\n    c.stroke();\r\n    c.setDashed(false);\r\n    c.begin();\r\n    c.moveTo(w - 75, 0);\r\n    c.lineTo(w - 30, 0);\r\n    c.lineTo(w - 15, 15);\r\n    c.lineTo(w - 15, 50);\r\n    c.lineTo(w - 75, 50);\r\n    c.close();\r\n    c.fillAndStroke();\r\n    var strokeColor = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, '#000000');\r\n    c.setFillColor(strokeColor);\r\n    c.begin();\r\n    c.moveTo(0, h - 10);\r\n    c.lineTo(4, h);\r\n    c.lineTo(8, h - 10);\r\n    c.close();\r\n    c.fillAndStroke();\r\n};\r\nmxCellRenderer.registerShape('mxgraph.lean_mapping.production_kanban', mxLeanProductionKanban);\r\n//**********************************************************************************************************************************************************\r\n//Withdrawal Kanban\r\n//**********************************************************************************************************************************************************\r\n/**\r\n* Extends mxShape.\r\n*/\r\nfunction mxLeanWithdrawalKanban(bounds, fill, stroke, strokewidth) {\r\n    mxShape.call(this);\r\n    this.bounds = bounds;\r\n    this.fill = fill;\r\n    this.stroke = stroke;\r\n    this.strokewidth = (strokewidth != null) ? strokewidth : 1;\r\n}\r\n;\r\n/**\r\n* Extends mxShape.\r\n*/\r\nmxUtils.extend(mxLeanWithdrawalKanban, mxShape);\r\n/**\r\n* Function: paintVertexShape\r\n*\r\n* Paints the vertex shape.\r\n*/\r\nmxLeanWithdrawalKanban.prototype.paintVertexShape = function (c, x, y, w, h) {\r\n    c.translate(x, y);\r\n    c.setDashed(true);\r\n    c.begin();\r\n    c.moveTo(4, h - 10);\r\n    c.lineTo(4, 25);\r\n    c.lineTo(w, 25);\r\n    c.stroke();\r\n    c.setDashed(false);\r\n    c.begin();\r\n    c.moveTo(w - 75, 0);\r\n    c.lineTo(w - 30, 0);\r\n    c.lineTo(w - 15, 15);\r\n    c.lineTo(w - 15, 50);\r\n    c.lineTo(w - 75, 50);\r\n    c.close();\r\n    c.fillAndStroke();\r\n    c.begin();\r\n    c.moveTo(w - 75, 45);\r\n    c.lineTo(w - 70, 50);\r\n    c.moveTo(w - 75, 35);\r\n    c.lineTo(w - 60, 50);\r\n    c.moveTo(w - 75, 25);\r\n    c.lineTo(w - 50, 50);\r\n    c.moveTo(w - 75, 15);\r\n    c.lineTo(w - 40, 50);\r\n    c.moveTo(w - 75, 5);\r\n    c.lineTo(w - 30, 50);\r\n    c.moveTo(w - 70, 0);\r\n    c.lineTo(w - 20, 50);\r\n    c.moveTo(w - 60, 0);\r\n    c.lineTo(w - 15, 45);\r\n    c.moveTo(w - 50, 0);\r\n    c.lineTo(w - 15, 35);\r\n    c.moveTo(w - 40, 0);\r\n    c.lineTo(w - 15, 25);\r\n    c.stroke();\r\n    var strokeColor = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, '#000000');\r\n    c.setFillColor(strokeColor);\r\n    c.begin();\r\n    c.moveTo(0, h - 10);\r\n    c.lineTo(4, h);\r\n    c.lineTo(8, h - 10);\r\n    c.close();\r\n    c.fillAndStroke();\r\n};\r\nmxCellRenderer.registerShape('mxgraph.lean_mapping.withdrawal_kanban', mxLeanWithdrawalKanban);\r\n//**********************************************************************************************************************************************************\r\n//Signal Kanban\r\n//**********************************************************************************************************************************************************\r\n/**\r\n* Extends mxShape.\r\n*/\r\nfunction mxLeanSignalKanban(bounds, fill, stroke, strokewidth) {\r\n    mxShape.call(this);\r\n    this.bounds = bounds;\r\n    this.fill = fill;\r\n    this.stroke = stroke;\r\n    this.strokewidth = (strokewidth != null) ? strokewidth : 1;\r\n}\r\n;\r\n/**\r\n* Extends mxShape.\r\n*/\r\nmxUtils.extend(mxLeanSignalKanban, mxShape);\r\n/**\r\n* Function: paintVertexShape\r\n*\r\n* Paints the vertex shape.\r\n*/\r\nmxLeanSignalKanban.prototype.paintVertexShape = function (c, x, y, w, h) {\r\n    c.translate(x, y);\r\n    c.setDashed(true);\r\n    c.begin();\r\n    c.moveTo(4, h - 10);\r\n    c.lineTo(4, 15);\r\n    c.lineTo(w, 15);\r\n    c.stroke();\r\n    c.setDashed(false);\r\n    c.begin();\r\n    c.moveTo(w - 65, 0);\r\n    c.lineTo(w - 25, 0);\r\n    c.lineTo(w - 45, 45);\r\n    c.close();\r\n    c.fillAndStroke();\r\n    var strokeColor = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, '#000000');\r\n    c.setFillColor(strokeColor);\r\n    c.begin();\r\n    c.moveTo(0, h - 10);\r\n    c.lineTo(4, h);\r\n    c.lineTo(8, h - 10);\r\n    c.close();\r\n    c.fillAndStroke();\r\n};\r\nmxCellRenderer.registerShape('mxgraph.lean_mapping.signal_kanban', mxLeanSignalKanban);\r\n//**********************************************************************************************************************************************************\r\n//Sequenced Pull Ball\r\n//**********************************************************************************************************************************************************\r\n/**\r\n* Extends mxShape.\r\n*/\r\nfunction mxLeanSequencedPullBall(bounds, fill, stroke, strokewidth) {\r\n    mxShape.call(this);\r\n    this.bounds = bounds;\r\n    this.fill = fill;\r\n    this.stroke = stroke;\r\n    this.strokewidth = (strokewidth != null) ? strokewidth : 1;\r\n}\r\n;\r\n/**\r\n* Extends mxShape.\r\n*/\r\nmxUtils.extend(mxLeanSequencedPullBall, mxShape);\r\n/**\r\n* Function: paintVertexShape\r\n*\r\n* Paints the vertex shape.\r\n*/\r\nmxLeanSequencedPullBall.prototype.paintVertexShape = function (c, x, y, w, h) {\r\n    c.translate(x, y);\r\n    c.ellipse(0, 0, w, h);\r\n    c.fillAndStroke();\r\n    var strokeColor = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, '#000000');\r\n    c.setFillColor(strokeColor);\r\n    c.setShadow(false);\r\n    c.ellipse(w * 0.15, h * 0.15, w * 0.7, h * 0.7);\r\n    c.fillAndStroke();\r\n};\r\nmxCellRenderer.registerShape('mxgraph.lean_mapping.sequenced_pull_ball', mxLeanSequencedPullBall);\r\nmxLeanSequencedPullBall.prototype.constraints = [\r\n    new mxConnectionConstraint(new mxPoint(0.144, 0.144), false),\r\n    new mxConnectionConstraint(new mxPoint(0.856, 0.144), false),\r\n    new mxConnectionConstraint(new mxPoint(0.856, 0.856), false),\r\n    new mxConnectionConstraint(new mxPoint(0.144, 0.856), false),\r\n    new mxConnectionConstraint(new mxPoint(0, 0.5), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 0.5), true),\r\n    new mxConnectionConstraint(new mxPoint(0.5, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0.5, 1), true)\r\n];\r\n//**********************************************************************************************************************************************************\r\n//Rail Shipment\r\n//**********************************************************************************************************************************************************\r\n/**\r\n* Extends mxShape.\r\n*/\r\nfunction mxLeanRailShipment(bounds, fill, stroke, strokewidth) {\r\n    mxShape.call(this);\r\n    this.bounds = bounds;\r\n    this.fill = fill;\r\n    this.stroke = stroke;\r\n    this.strokewidth = (strokewidth != null) ? strokewidth : 1;\r\n}\r\n;\r\n/**\r\n* Extends mxShape.\r\n*/\r\nmxUtils.extend(mxLeanRailShipment, mxShape);\r\n/**\r\n* Function: paintVertexShape\r\n*\r\n* Paints the vertex shape.\r\n*/\r\nmxLeanRailShipment.prototype.paintVertexShape = function (c, x, y, w, h) {\r\n    c.translate(x, y);\r\n    c.rect(w * 0.1, 0, w * 0.35, h * 0.8);\r\n    c.fillAndStroke();\r\n    c.rect(w * 0.55, 0, w * 0.35, h * 0.8);\r\n    c.fillAndStroke();\r\n    c.begin();\r\n    c.moveTo(0, h);\r\n    c.lineTo(w, h);\r\n    c.moveTo(w * 0.45, h * 0.7);\r\n    c.lineTo(w * 0.55, h * 0.7);\r\n    c.stroke();\r\n    c.ellipse(w * 0.15, h * 0.8, w * 0.06, h * 0.2);\r\n    c.fillAndStroke();\r\n    c.ellipse(w * 0.34, h * 0.8, w * 0.06, h * 0.2);\r\n    c.fillAndStroke();\r\n    c.ellipse(w * 0.6, h * 0.8, w * 0.06, h * 0.2);\r\n    c.fillAndStroke();\r\n    c.ellipse(w * 0.79, h * 0.8, w * 0.06, h * 0.2);\r\n    c.fillAndStroke();\r\n};\r\nmxCellRenderer.registerShape('mxgraph.lean_mapping.rail_shipment', mxLeanRailShipment);\r\nmxLeanRailShipment.prototype.constraints = [\r\n    new mxConnectionConstraint(new mxPoint(0, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(0.25, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0.5, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0.75, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0.1, 0.25), false),\r\n    new mxConnectionConstraint(new mxPoint(0.1, 0.5), false),\r\n    new mxConnectionConstraint(new mxPoint(0.1, 0.75), false),\r\n    new mxConnectionConstraint(new mxPoint(0.9, 0.25), false),\r\n    new mxConnectionConstraint(new mxPoint(0.9, 0.5), false),\r\n    new mxConnectionConstraint(new mxPoint(0.9, 0.75), false),\r\n    new mxConnectionConstraint(new mxPoint(0.25, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(0.5, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(0.75, 1), true)\r\n];\r\n//**********************************************************************************************************************************************************\r\n//Warehouse\r\n//**********************************************************************************************************************************************************\r\n/**\r\n* Extends mxShape.\r\n*/\r\nfunction mxLeanWarehouse(bounds, fill, stroke, strokewidth) {\r\n    mxShape.call(this);\r\n    this.bounds = bounds;\r\n    this.fill = fill;\r\n    this.stroke = stroke;\r\n    this.strokewidth = (strokewidth != null) ? strokewidth : 1;\r\n}\r\n;\r\n/**\r\n* Extends mxShape.\r\n*/\r\nmxUtils.extend(mxLeanWarehouse, mxShape);\r\n/**\r\n* Function: paintVertexShape\r\n*\r\n* Paints the vertex shape.\r\n*/\r\nmxLeanWarehouse.prototype.paintVertexShape = function (c, x, y, w, h) {\r\n    c.translate(x, y);\r\n    c.rect(0, 0, w, h);\r\n    c.fillAndStroke();\r\n    c.setShadow(false);\r\n    c.begin();\r\n    c.moveTo(0, h * 0.4);\r\n    c.lineTo(w, h * 0.4);\r\n    c.moveTo(w * 0.15, h);\r\n    c.lineTo(w * 0.15, h * 0.55);\r\n    c.lineTo(w * 0.3, h * 0.55);\r\n    c.lineTo(w * 0.3, h);\r\n    c.stroke();\r\n    c.ellipse(w * 0.27, h * 0.75, w * 0.02, w * 0.02);\r\n    c.stroke();\r\n};\r\nmxCellRenderer.registerShape('mxgraph.lean_mapping.warehouse', mxLeanWarehouse);\r\nmxLeanWarehouse.prototype.constraints = [\r\n    new mxConnectionConstraint(new mxPoint(0, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(0.25, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0.5, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0.75, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 0.25), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 0.5), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 0.75), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 0.25), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 0.5), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 0.75), true),\r\n    new mxConnectionConstraint(new mxPoint(0.25, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(0.5, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(0.75, 1), true)\r\n];\r\n//**********************************************************************************************************************************************************\r\n//Timeline\r\n//**********************************************************************************************************************************************************\r\n/**\r\n* Extends mxShape.\r\n*/\r\nfunction mxLeanTimeline(bounds, fill, stroke, strokewidth) {\r\n    mxShape.call(this);\r\n    this.bounds = bounds;\r\n    this.fill = fill;\r\n    this.stroke = stroke;\r\n    this.strokewidth = (strokewidth != null) ? strokewidth : 1;\r\n}\r\n;\r\n/**\r\n* Extends mxShape.\r\n*/\r\nmxUtils.extend(mxLeanTimeline, mxShape);\r\n/**\r\n* Function: paintVertexShape\r\n*\r\n* Paints the vertex shape.\r\n*/\r\nmxLeanTimeline.prototype.paintVertexShape = function (c, x, y, w, h) {\r\n    c.translate(x, y);\r\n    var shapeInfo = mxUtils.getValue(this.style, 'mainText', '20,Time 1,50,Time 2,30,Time 3,40,Time 4,30,Time 5,50,Time 6,20,Time 7').toString().split(',');\r\n    var fontSize = mxUtils.getValue(this.style, mxConstants.STYLE_FONTSIZE, '12');\r\n    var times = new Array();\r\n    var totalTime = 0;\r\n    for (var i = 0; i < shapeInfo.length; i = i + 2) {\r\n        var currTime = parseFloat(shapeInfo[i]);\r\n        times.push(currTime);\r\n        totalTime = totalTime + currTime;\r\n    }\r\n    ;\r\n    var scaleX = w / totalTime;\r\n    var names = new Array();\r\n    for (var i = 1; i < shapeInfo.length; i = i + 2) {\r\n        names.push(shapeInfo[i]);\r\n    }\r\n    ;\r\n    c.begin();\r\n    var currX = 0;\r\n    c.moveTo(0, h);\r\n    for (var i = 0; i < names.length; i++) {\r\n        var currTime = times[i] * scaleX;\r\n        currX = currX + currTime;\r\n        if (i % 2 === 0) {\r\n            c.lineTo(currX, h);\r\n            c.lineTo(currX, fontSize * 1.5);\r\n            c.text(currX - currTime * 0.5, h - fontSize * 0.75, 0, 0, names[i], mxConstants.ALIGN_CENTER, mxConstants.ALIGN_MIDDLE, 0, null, 0, 0, 0);\r\n        }\r\n        else {\r\n            c.lineTo(currX, fontSize * 1.5);\r\n            c.lineTo(currX, h);\r\n            c.text(currX - currTime * 0.5, fontSize * 0.75, 0, 0, names[i], mxConstants.ALIGN_CENTER, mxConstants.ALIGN_MIDDLE, 0, null, 0, 0, 0);\r\n        }\r\n    }\r\n    ;\r\n    c.stroke();\r\n};\r\nmxCellRenderer.registerShape('mxgraph.lean_mapping.timeline', mxLeanTimeline);\r\n//**********************************************************************************************************************************************************\r\n//Cross Dock\r\n//**********************************************************************************************************************************************************\r\n/**\r\n* Extends mxShape.\r\n*/\r\nfunction mxLeanCrossDock(bounds, fill, stroke, strokewidth) {\r\n    mxShape.call(this);\r\n    this.bounds = bounds;\r\n    this.fill = fill;\r\n    this.stroke = stroke;\r\n    this.strokewidth = (strokewidth != null) ? strokewidth : 1;\r\n}\r\n;\r\n/**\r\n* Extends mxShape.\r\n*/\r\nmxUtils.extend(mxLeanCrossDock, mxShape);\r\n/**\r\n* Function: paintVertexShape\r\n*\r\n* Paints the vertex shape.\r\n*/\r\nmxLeanCrossDock.prototype.paintVertexShape = function (c, x, y, w, h) {\r\n    c.translate(x, y);\r\n    c.rect(0, 0, w, h);\r\n    c.fillAndStroke();\r\n    c.setShadow(false);\r\n    c.begin();\r\n    c.moveTo(0, h * 0.25);\r\n    c.lineTo(w, h * 0.25);\r\n    c.moveTo(w * 0.1, h * 0.4);\r\n    c.lineTo(w * 0.35, h * 0.4);\r\n    c.arcTo(w * 0.15, h * 0.15, 0, 0, 1, w * 0.5, h * 0.5);\r\n    c.arcTo(w * 0.15, h * 0.15, 0, 0, 0, w * 0.65, h * 0.6);\r\n    c.lineTo(w * 0.9, h * 0.6);\r\n    c.stroke();\r\n    c.moveTo(w * 0.1, h * 0.4);\r\n    c.lineTo(w * 0.35, h * 0.4);\r\n    c.arcTo(w * 0.15, h * 0.25, 0, 0, 1, w * 0.5, h * 0.55);\r\n    c.arcTo(w * 0.15, h * 0.25, 0, 0, 0, w * 0.65, h * 0.7);\r\n    c.lineTo(w * 0.9, h * 0.7);\r\n    c.stroke();\r\n    c.moveTo(w * 0.1, h * 0.4);\r\n    c.lineTo(w * 0.35, h * 0.4);\r\n    c.arcTo(w * 0.15, h * 0.3, 0, 0, 1, w * 0.5, h * 0.6);\r\n    c.arcTo(w * 0.15, h * 0.3, 0, 0, 0, w * 0.65, h * 0.8);\r\n    c.lineTo(w * 0.9, h * 0.8);\r\n    c.stroke();\r\n    c.moveTo(w * 0.1, h * 0.8);\r\n    c.lineTo(w * 0.35, h * 0.8);\r\n    c.arcTo(w * 0.15, h * 0.3, 0, 0, 0, w * 0.5, h * 0.6);\r\n    c.arcTo(w * 0.15, h * 0.3, 0, 0, 1, w * 0.65, h * 0.4);\r\n    c.lineTo(w * 0.9, h * 0.4);\r\n    c.stroke();\r\n    c.moveTo(w * 0.1, h * 0.8);\r\n    c.lineTo(w * 0.35, h * 0.8);\r\n    c.arcTo(w * 0.15, h * 0.1, 0, 0, 0, w * 0.5, h * 0.75);\r\n    c.arcTo(w * 0.15, h * 0.1, 0, 0, 1, w * 0.65, h * 0.7);\r\n    c.lineTo(w * 0.9, h * 0.7);\r\n    c.stroke();\r\n};\r\nmxCellRenderer.registerShape('mxgraph.lean_mapping.crossDock', mxLeanCrossDock);\r\nmxLeanCrossDock.prototype.constraints = [\r\n    new mxConnectionConstraint(new mxPoint(0, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(0.25, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0.5, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0.75, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 0.25), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 0.5), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 0.75), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 0.25), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 0.5), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 0.75), true),\r\n    new mxConnectionConstraint(new mxPoint(0.25, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(0.5, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(0.75, 1), true)\r\n];\r\n//**********************************************************************************************************************************************************\r\n//Orders\r\n//**********************************************************************************************************************************************************\r\n/**\r\n* Extends mxShape.\r\n*/\r\nfunction mxLeanOrders(bounds, fill, stroke, strokewidth) {\r\n    mxShape.call(this);\r\n    this.bounds = bounds;\r\n    this.fill = fill;\r\n    this.stroke = stroke;\r\n    this.strokewidth = (strokewidth != null) ? strokewidth : 1;\r\n}\r\n;\r\n/**\r\n* Extends mxShape.\r\n*/\r\nmxUtils.extend(mxLeanOrders, mxShape);\r\n/**\r\n* Function: paintVertexShape\r\n*\r\n* Paints the vertex shape.\r\n*/\r\nmxLeanOrders.prototype.paintVertexShape = function (c, x, y, w, h) {\r\n    c.translate(x, y);\r\n    c.rect(0, h * 0.56, w, h * 0.44);\r\n    c.fillAndStroke();\r\n    var strokeWidth = parseFloat(mxUtils.getValue(this.style, mxConstants.STYLE_STROKEWIDTH, '2'));\r\n    c.setStrokeWidth(strokeWidth * 0.5);\r\n    c.begin();\r\n    c.moveTo(w * 0.04, h * 0.5418);\r\n    c.lineTo(w * 0.94, h * 0.5418);\r\n    c.moveTo(w * 0.0522, h * 0.5088);\r\n    c.lineTo(w * 0.9522, h * 0.5088);\r\n    c.moveTo(w * 0.05, h * 0.4738);\r\n    c.lineTo(w * 0.95, h * 0.4738);\r\n    c.moveTo(w * 0.0456, h * 0.4427);\r\n    c.lineTo(w * 0.9456, h * 0.4427);\r\n    c.moveTo(w * 0.0422, h * 0.4135);\r\n    c.lineTo(w * 0.9422, h * 0.4135);\r\n    c.moveTo(w * 0.0533, h * 0.3804);\r\n    c.lineTo(w * 0.9533, h * 0.3804);\r\n    c.moveTo(w * 0.0556, h * 0.3454);\r\n    c.lineTo(w * 0.9556, h * 0.3454);\r\n    c.moveTo(w * 0.05, h * 0.3143);\r\n    c.lineTo(w * 0.95, h * 0.3143);\r\n    c.moveTo(w * 0.0489, h * 0.2832);\r\n    c.lineTo(w * 0.0489, h * 0.2832);\r\n    c.moveTo(w * 0.0544, h * 0.254);\r\n    c.lineTo(w * 0.9544, h * 0.254);\r\n    c.moveTo(w * 0.0489, h * 0.221);\r\n    c.lineTo(w * 0.9489, h * 0.221);\r\n    c.moveTo(w * 0.0556, h * 0.1918);\r\n    c.lineTo(w * 0.9556, h * 0.1918);\r\n    c.moveTo(w * 0.0522, h * 0.1587);\r\n    c.lineTo(w * 0.9522, h * 0.1587);\r\n    c.moveTo(w * 0.0544, h * 0.1276);\r\n    c.lineTo(w * 0.9544, h * 0.1276);\r\n    c.moveTo(w * 0.0544, h * 0.0965);\r\n    c.lineTo(w * 0.9544, h * 0.0965);\r\n    c.moveTo(w * 0.0556, h * 0.0654);\r\n    c.lineTo(w * 0.9556, h * 0.0654);\r\n    c.moveTo(w * 0.0533, h * 0.0304);\r\n    c.lineTo(w * 0.9533, h * 0.0304);\r\n    c.moveTo(w * 0.0556, 0);\r\n    c.lineTo(w * 0.9556, 0);\r\n    c.stroke();\r\n    //\tvar strokeColor = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, '#000000');\r\n    //\tc.setFontSize(Math.min(h * 0.5, w * 0.2));\r\n    //\tc.setFontColor(strokeColor);\r\n    //\tc.setFontStyle(mxConstants.FONT_BOLD);\r\n    //\tc.text(w * 0.5, h * 0.78, 0, 0, 'IN', mxConstants.ALIGN_CENTER, mxConstants.ALIGN_MIDDLE, 0, null, 0, 0, 0);\r\n};\r\nmxCellRenderer.registerShape('mxgraph.lean_mapping.orders', mxLeanOrders);\r\nmxLeanOrders.prototype.constraints = [\r\n    new mxConnectionConstraint(new mxPoint(0.05, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0.95, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(0.25, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0.5, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0.75, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0.05, 0.25), false),\r\n    new mxConnectionConstraint(new mxPoint(0.05, 0.5), false),\r\n    new mxConnectionConstraint(new mxPoint(0, 0.75), true),\r\n    new mxConnectionConstraint(new mxPoint(0.95, 0.25), false),\r\n    new mxConnectionConstraint(new mxPoint(0.95, 0.5), false),\r\n    new mxConnectionConstraint(new mxPoint(1, 0.75), true),\r\n    new mxConnectionConstraint(new mxPoint(0.25, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(0.5, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(0.75, 1), true)\r\n];\r\n//**********************************************************************************************************************************************************\r\n//Batched Kanban\r\n//**********************************************************************************************************************************************************\r\n/**\r\n* Extends mxShape.\r\n*/\r\nfunction mxLeanBatchedKanban(bounds, fill, stroke, strokewidth) {\r\n    mxShape.call(this);\r\n    this.bounds = bounds;\r\n    this.fill = fill;\r\n    this.stroke = stroke;\r\n    this.strokewidth = (strokewidth != null) ? strokewidth : 1;\r\n}\r\n;\r\n/**\r\n* Extends mxShape.\r\n*/\r\nmxUtils.extend(mxLeanBatchedKanban, mxShape);\r\n/**\r\n* Function: paintVertexShape\r\n*\r\n* Paints the vertex shape.\r\n*/\r\nmxLeanBatchedKanban.prototype.paintVertexShape = function (c, x, y, w, h) {\r\n    w = Math.max(110, w);\r\n    c.translate(x, y);\r\n    c.begin();\r\n    c.moveTo(4, h * 0.5);\r\n    c.lineTo(w, h * 0.5);\r\n    c.stroke();\r\n    c.begin();\r\n    c.moveTo(w * 0.5 - 20, h * 0.5 - 35);\r\n    c.lineTo(w * 0.5 + 25, h * 0.5 - 35);\r\n    c.lineTo(w * 0.5 + 40, h * 0.5 - 20);\r\n    c.lineTo(w * 0.5 + 40, h * 0.5 + 15);\r\n    c.lineTo(w * 0.5 - 20, h * 0.5 + 15);\r\n    c.close();\r\n    c.fillAndStroke();\r\n    c.begin();\r\n    c.moveTo(w * 0.5 - 30, h * 0.5 - 25);\r\n    c.lineTo(w * 0.5 + 15, h * 0.5 - 25);\r\n    c.lineTo(w * 0.5 + 30, h * 0.5 - 10);\r\n    c.lineTo(w * 0.5 + 30, h * 0.5 + 25);\r\n    c.lineTo(w * 0.5 - 30, h * 0.5 + 25);\r\n    c.close();\r\n    c.fillAndStroke();\r\n    c.begin();\r\n    c.moveTo(w * 0.5 - 40, h * 0.5 - 15);\r\n    c.lineTo(w * 0.5 + 5, h * 0.5 - 15);\r\n    c.lineTo(w * 0.5 + 20, h * 0.5);\r\n    c.lineTo(w * 0.5 + 20, h * 0.5 + 35);\r\n    c.lineTo(w * 0.5 - 40, h * 0.5 + 35);\r\n    c.close();\r\n    c.fillAndStroke();\r\n    var strokeColor = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, '#000000');\r\n    c.setFillColor(strokeColor);\r\n    c.begin();\r\n    c.moveTo(w - 10, h * 0.5 - 4);\r\n    c.lineTo(w, h * 0.5);\r\n    c.lineTo(w - 10, h * 0.5 + 4);\r\n    c.close();\r\n    c.fillAndStroke();\r\n};\r\nmxCellRenderer.registerShape('mxgraph.lean_mapping.batched_kanban', mxLeanBatchedKanban);\r\nmxLeanBatchedKanban.prototype.constraints = [\r\n    new mxConnectionConstraint(new mxPoint(0, 0.5), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 0.5), true)\r\n];\r\n//**********************************************************************************************************************************************************\r\n//Control Center\r\n//**********************************************************************************************************************************************************\r\n/**\r\n* Extends mxShape.\r\n*/\r\nfunction mxLeanControlCenter(bounds, fill, stroke, strokewidth) {\r\n    mxShape.call(this);\r\n    this.bounds = bounds;\r\n    this.fill = fill;\r\n    this.stroke = stroke;\r\n    this.strokewidth = (strokewidth != null) ? strokewidth : 1;\r\n}\r\n;\r\n/**\r\n* Extends mxShape.\r\n*/\r\nmxUtils.extend(mxLeanControlCenter, mxShape);\r\n/**\r\n* Function: paintVertexShape\r\n*\r\n* Paints the vertex shape.\r\n*/\r\nmxLeanControlCenter.prototype.paintVertexShape = function (c, x, y, w, h) {\r\n    c.translate(x, y);\r\n    c.rect(w * 0.15, 0, w * 0.7, h * 0.8);\r\n    c.fillAndStroke();\r\n    c.rect(0, h * 0.8, w, h * 0.2);\r\n    c.fillAndStroke();\r\n};\r\nmxCellRenderer.registerShape('mxgraph.lean_mapping.control_center', mxLeanControlCenter);\r\nmxLeanControlCenter.prototype.constraints = [\r\n    new mxConnectionConstraint(new mxPoint(0.15, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0.85, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(1, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(0.5, 0), true),\r\n    new mxConnectionConstraint(new mxPoint(0.15, 0.25), false),\r\n    new mxConnectionConstraint(new mxPoint(0.15, 0.5), false),\r\n    new mxConnectionConstraint(new mxPoint(0, 0.75), true),\r\n    new mxConnectionConstraint(new mxPoint(0.85, 0.25), false),\r\n    new mxConnectionConstraint(new mxPoint(0.85, 0.5), false),\r\n    new mxConnectionConstraint(new mxPoint(1, 0.75), true),\r\n    new mxConnectionConstraint(new mxPoint(0.25, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(0.5, 1), true),\r\n    new mxConnectionConstraint(new mxPoint(0.75, 1), true)\r\n];\r\n//**********************************************************************************************************************************************************\r\n//Electronical Info\r\n//**********************************************************************************************************************************************************\r\nfunction LeanElectronicInfoShape() {\r\n    mxArrow.call(this);\r\n}\r\n;\r\nmxUtils.extend(LeanElectronicInfoShape, mxArrow);\r\nLeanElectronicInfoShape.prototype.paintEdgeShape = function (c, pts) {\r\n    // Base vector (between end points)\r\n    var p0 = pts[0];\r\n    var pe = pts[pts.length - 1];\r\n    var dx = pe.x - p0.x;\r\n    var dy = pe.y - p0.y;\r\n    p0.x = p0.x + dx * 0.05;\r\n    p0.y = p0.y + dy * 0.05;\r\n    pe.x = pe.x - dx * 0.05;\r\n    pe.y = pe.y - dy * 0.05;\r\n    dx = pe.x - p0.x;\r\n    dy = pe.y - p0.y;\r\n    var dist = Math.sqrt(dx * dx + dy * dy);\r\n    var nx = dx / dist;\r\n    var ny = dy / dist;\r\n    var midX = p0.x + dx * 0.5;\r\n    var midY = p0.y + dy * 0.5;\r\n    var p1x = midX - nx * dist * 0.1 - ny / 3 * dist * 0.1;\r\n    var p1y = midY - ny * dist * 0.1 + nx / 3 * dist * 0.1;\r\n    var p4x = midX + nx * dist * 0.1 + ny / 3 * dist * 0.1;\r\n    var p4y = midY + ny * dist * 0.1 - nx / 3 * dist * 0.1;\r\n    c.begin();\r\n    c.moveTo(p0.x, p0.y);\r\n    c.lineTo(p4x, p4y);\r\n    c.lineTo(p1x, p1y);\r\n    c.lineTo(pe.x, pe.y);\r\n    c.stroke();\r\n    var dx = pe.x - p1x;\r\n    var dy = pe.y - p1y;\r\n    var dist = Math.sqrt(dx * dx + dy * dy);\r\n    var nx = dx / dist;\r\n    var ny = dy / dist;\r\n    c.setFillColor(mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, '#000000'));\r\n    c.begin();\r\n    c.moveTo(pe.x - nx * 10 - ny * 5, pe.y - ny * 10 + nx * 5);\r\n    c.lineTo(pe.x, pe.y);\r\n    c.lineTo(pe.x - nx * 10 + ny * 5, pe.y - ny * 10 - nx * 5);\r\n    c.fillAndStroke();\r\n};\r\n// Registers the electronic info shape\r\nmxCellRenderer.prototype.defaultShapes['mxgraph.lean_mapping.electronic_info_flow_edge'] = LeanElectronicInfoShape;\r\n//**********************************************************************************************************************************************************\r\n//Manual Info\r\n//**********************************************************************************************************************************************************\r\nfunction LeanManualInfoShape() {\r\n    mxArrow.call(this);\r\n}\r\n;\r\nmxUtils.extend(LeanManualInfoShape, mxArrow);\r\nLeanManualInfoShape.prototype.paintEdgeShape = function (c, pts) {\r\n    // Base vector (between end points)\r\n    var p0 = pts[0];\r\n    var pe = pts[pts.length - 1];\r\n    var dx = pe.x - p0.x;\r\n    var dy = pe.y - p0.y;\r\n    p0.x = p0.x + dx * 0.05;\r\n    p0.y = p0.y + dy * 0.05;\r\n    pe.x = pe.x - dx * 0.05;\r\n    pe.y = pe.y - dy * 0.05;\r\n    dx = pe.x - p0.x;\r\n    dy = pe.y - p0.y;\r\n    var dist = Math.sqrt(dx * dx + dy * dy);\r\n    var nx = dx / dist;\r\n    var ny = dy / dist;\r\n    c.begin();\r\n    c.moveTo(p0.x, p0.y);\r\n    c.lineTo(pe.x, pe.y);\r\n    c.stroke();\r\n    c.setFillColor(mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, '#000000'));\r\n    c.begin();\r\n    c.moveTo(pe.x - nx * 10 - ny * 5, pe.y - ny * 10 + nx * 5);\r\n    c.lineTo(pe.x, pe.y);\r\n    c.lineTo(pe.x - nx * 10 + ny * 5, pe.y - ny * 10 - nx * 5);\r\n    c.fillAndStroke();\r\n};\r\n//Registers the electronic info shape\r\nmxCellRenderer.prototype.defaultShapes['mxgraph.lean_mapping.manual_info_flow_edge'] = LeanManualInfoShape;\r\n//**********************************************************************************************************************************************************\r\n//Timeline\r\n//**********************************************************************************************************************************************************\r\n/**\r\n* Extends mxShape.\r\n*/\r\nfunction mxShapeLeanTimeline(bounds, fill, stroke, strokewidth) {\r\n    mxShape.call(this);\r\n    this.bounds = bounds;\r\n    this.fill = fill;\r\n    this.stroke = stroke;\r\n    this.strokewidth = (strokewidth != null) ? strokewidth : 1;\r\n}\r\n;\r\n/**\r\n* Extends mxShape.\r\n*/\r\nmxUtils.extend(mxShapeLeanTimeline, mxShape);\r\nmxShapeLeanTimeline.prototype.cst = {\r\n    SHAPE_TIMELINE: 'mxgraph.lean_mapping.timeline2'\r\n};\r\n/**\r\n* Function: paintVertexShape\r\n*\r\n* Paints the vertex shape.\r\n*/\r\nmxShapeLeanTimeline.prototype.paintVertexShape = function (c, x, y, w, h) {\r\n    c.translate(x, y);\r\n    var dy1 = mxUtils.getValue(this.style, 'dy1', '0');\r\n    var dx2 = mxUtils.getValue(this.style, 'dx2', '0');\r\n    var dy2 = mxUtils.getValue(this.style, 'dy2', '0');\r\n    var dx3 = mxUtils.getValue(this.style, 'dx3', '0');\r\n    var dy3 = mxUtils.getValue(this.style, 'dy3', '0');\r\n    var dx4 = mxUtils.getValue(this.style, 'dx4', '0');\r\n    var dy4 = mxUtils.getValue(this.style, 'dy4', '0');\r\n    var dx5 = mxUtils.getValue(this.style, 'dx5', '0');\r\n    var dy5 = mxUtils.getValue(this.style, 'dy5', '0');\r\n    var dy6 = mxUtils.getValue(this.style, 'dy6', '0');\r\n    var lastUp = true;\r\n    c.begin();\r\n    if (dy1 <= 0.5) {\r\n        c.moveTo(0, 0);\r\n        lastUp = true;\r\n    }\r\n    else {\r\n        c.moveTo(0, h);\r\n        lastUp = false;\r\n    }\r\n    //2\r\n    if (dy2 <= 0.5 && lastUp) {\r\n        c.lineTo(dx2, 0);\r\n        lastUp = true;\r\n    }\r\n    else if (dy2 > 0.5 && !lastUp) {\r\n        c.lineTo(dx2, h);\r\n        lastUp = false;\r\n    }\r\n    else if (dy2 <= 0.5 && !lastUp) {\r\n        c.lineTo(dx2, h);\r\n        c.lineTo(dx2, 0);\r\n        lastUp = true;\r\n    }\r\n    else {\r\n        c.lineTo(dx2, 0);\r\n        c.lineTo(dx2, h);\r\n        lastUp = false;\r\n    }\r\n    //3\r\n    if (dy3 <= 0.5 && lastUp) {\r\n        c.lineTo(dx3, 0);\r\n        lastUp = true;\r\n    }\r\n    else if (dy3 > 0.5 && !lastUp) {\r\n        c.lineTo(dx3, h);\r\n        lastUp = false;\r\n    }\r\n    else if (dy3 <= 0.5 && !lastUp) {\r\n        c.lineTo(dx3, h);\r\n        c.lineTo(dx3, 0);\r\n        lastUp = true;\r\n    }\r\n    else {\r\n        c.lineTo(dx3, 0);\r\n        c.lineTo(dx3, h);\r\n        lastUp = false;\r\n    }\r\n    //4\r\n    if (dy4 <= 0.5 && lastUp) {\r\n        c.lineTo(dx4, 0);\r\n        lastUp = true;\r\n    }\r\n    else if (dy4 > 0.5 && !lastUp) {\r\n        c.lineTo(dx4, h);\r\n        lastUp = false;\r\n    }\r\n    else if (dy4 <= 0.5 && !lastUp) {\r\n        c.lineTo(dx4, h);\r\n        c.lineTo(dx4, 0);\r\n        lastUp = true;\r\n    }\r\n    else {\r\n        c.lineTo(dx4, 0);\r\n        c.lineTo(dx4, h);\r\n        lastUp = false;\r\n    }\r\n    //5\r\n    if (dy5 <= 0.5 && lastUp) {\r\n        c.lineTo(dx5, 0);\r\n        lastUp = true;\r\n    }\r\n    else if (dy5 > 0.5 && !lastUp) {\r\n        c.lineTo(dx5, h);\r\n        lastUp = false;\r\n    }\r\n    else if (dy5 <= 0.5 && !lastUp) {\r\n        c.lineTo(dx5, h);\r\n        c.lineTo(dx5, 0);\r\n        lastUp = true;\r\n    }\r\n    else {\r\n        c.lineTo(dx5, 0);\r\n        c.lineTo(dx5, h);\r\n        lastUp = false;\r\n    }\r\n    //6\r\n    if (dy6 <= 0.5 && lastUp) {\r\n        c.lineTo(w, 0);\r\n        lastUp = true;\r\n    }\r\n    else if (dy6 > 0.5 && !lastUp) {\r\n        c.lineTo(w, h);\r\n        lastUp = false;\r\n    }\r\n    else if (dy6 <= 0.5 && !lastUp) {\r\n        c.lineTo(w, h);\r\n        c.lineTo(w, 0);\r\n        lastUp = true;\r\n    }\r\n    else {\r\n        c.lineTo(w, 0);\r\n        c.lineTo(w, h);\r\n        lastUp = false;\r\n    }\r\n    //end\r\n    c.stroke();\r\n};\r\nmxCellRenderer.prototype.defaultShapes[mxShapeLeanTimeline.prototype.cst.SHAPE_TIMELINE] = mxShapeLeanTimeline;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/value_process/mxLeanMap.ts\n");

/***/ }),

/***/ "./src/value_process/mxValueProcessDiagram.ts":
/*!****************************************************!*\
  !*** ./src/value_process/mxValueProcessDiagram.ts ***!
  \****************************************************/
/*! exports provided: createValueProcessDiagram */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createValueProcessDiagram\", function() { return createValueProcessDiagram; });\n/* harmony import */ var _generic_mxGraphImport__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../generic/mxGraphImport */ \"./src/generic/mxGraphImport.ts\");\n/* harmony import */ var _FlexArrowShape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./FlexArrowShape */ \"./src/value_process/FlexArrowShape.ts\");\n/* harmony import */ var _mxLeanMap__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mxLeanMap */ \"./src/value_process/mxLeanMap.ts\");\n/* harmony import */ var _CellFactory__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./CellFactory */ \"./src/value_process/CellFactory.ts\");\n/* harmony import */ var _ValueProcessNodeRenderer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ValueProcessNodeRenderer */ \"./src/value_process/ValueProcessNodeRenderer.ts\");\n/* harmony import */ var _generic_mxGraphUtils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../generic/mxGraphUtils */ \"./src/generic/mxGraphUtils.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\nvar mxGraph = _generic_mxGraphImport__WEBPACK_IMPORTED_MODULE_0__[\"mxgraph\"].mxGraph, mxShape = _generic_mxGraphImport__WEBPACK_IMPORTED_MODULE_0__[\"mxgraph\"].mxShape, mxRubberband = _generic_mxGraphImport__WEBPACK_IMPORTED_MODULE_0__[\"mxgraph\"].mxRubberband, mxClient = _generic_mxGraphImport__WEBPACK_IMPORTED_MODULE_0__[\"mxgraph\"].mxClient, mxUtils = _generic_mxGraphImport__WEBPACK_IMPORTED_MODULE_0__[\"mxgraph\"].mxUtils, mxCellTracker = _generic_mxGraphImport__WEBPACK_IMPORTED_MODULE_0__[\"mxgraph\"].mxCellTracker, mxStackLayout = _generic_mxGraphImport__WEBPACK_IMPORTED_MODULE_0__[\"mxgraph\"].mxStackLayout, mxLayoutManager = _generic_mxGraphImport__WEBPACK_IMPORTED_MODULE_0__[\"mxgraph\"].mxLayoutManager, mxConstants = _generic_mxGraphImport__WEBPACK_IMPORTED_MODULE_0__[\"mxgraph\"].mxConstants, mxEdgeStyle = _generic_mxGraphImport__WEBPACK_IMPORTED_MODULE_0__[\"mxgraph\"].mxEdgeStyle, mxRectangle = _generic_mxGraphImport__WEBPACK_IMPORTED_MODULE_0__[\"mxgraph\"].mxRectangle, mxEvent = _generic_mxGraphImport__WEBPACK_IMPORTED_MODULE_0__[\"mxgraph\"].mxEvent, mxParallelEdgeLayout = _generic_mxGraphImport__WEBPACK_IMPORTED_MODULE_0__[\"mxgraph\"].mxParallelEdgeLayout, mxCircleLayout = _generic_mxGraphImport__WEBPACK_IMPORTED_MODULE_0__[\"mxgraph\"].mxCircleLayout, mxStencilRegistry = _generic_mxGraphImport__WEBPACK_IMPORTED_MODULE_0__[\"mxgraph\"].mxStencilRegistry, mxStencil = _generic_mxGraphImport__WEBPACK_IMPORTED_MODULE_0__[\"mxgraph\"].mxStencil, mxCellEditor = _generic_mxGraphImport__WEBPACK_IMPORTED_MODULE_0__[\"mxgraph\"].mxCellEditor, mxKeyHandler = _generic_mxGraphImport__WEBPACK_IMPORTED_MODULE_0__[\"mxgraph\"].mxKeyHandler;\r\nfunction createValueProcessDiagram(container, data) {\r\n    // Checks if the browser is supported\r\n    if (!mxClient.isBrowserSupported()) {\r\n        mxUtils.error('Browser is not supported!', 200, false);\r\n    }\r\n    else {\r\n        Object(_generic_mxGraphUtils__WEBPACK_IMPORTED_MODULE_5__[\"loadStencilFiles\"])([__webpack_require__(/*! ./resources/lean_mapping.xml */ \"./src/value_process/resources/lean_mapping.xml\")]);\r\n        // Creates the graph inside the given container\r\n        var graph = new mxGraph(container);\r\n        // Disables the built-in context menu\r\n        mxEvent.disableContextMenu(container);\r\n        // Allow panning using the right click buttion\r\n        graph.setPanning(true);\r\n        // allow resizing the container when an vertex moves outside of it\r\n        graph.setResizeContainer(true);\r\n        // enable the display of tooltips\r\n        graph.setTooltips(true);\r\n        // disable new connections and cloning cells, as well as drag and drop outside\r\n        graph.setConnectable(false);\r\n        graph.setCellsCloneable(false);\r\n        graph.setCellsDeletable(false);\r\n        graph.setDropEnabled(false);\r\n        graph.setSplitEnabled(false);\r\n        // Enables HTML labels\r\n        graph.setHtmlLabels(true);\r\n        // don't allow cells to be dropped outside of their current parent\r\n        graph.graphHandler.removeCellsFromParent = false;\r\n        // when a cells is collapsed, recalculate its preferred size\r\n        graph.collapseToPreferredSize = true;\r\n        // cells should not be bigger than their parents\r\n        graph.constrainChildren = true;\r\n        graph.extendParentsOnAdd = true;\r\n        graph.extendParents = true;\r\n        // disable the grid so things are more condensed\r\n        graph.gridEnabled = true;\r\n        // allow selection of cells\r\n        graph.cellsSelectable = true;\r\n        graph.gridSize = 5;\r\n        graph.border = 10;\r\n        // Forces panning for middle and right mouse buttons\r\n        var panningHandlerIsForcePanningEvent = graph.panningHandler.isForcePanningEvent;\r\n        graph.panningHandler.isForcePanningEvent = function (me) {\r\n            // Ctrl+left button is reported as right button in FF on Mac\r\n            return panningHandlerIsForcePanningEvent.apply(this, arguments) || (mxEvent.isMouseEvent(me.getEvent()) &&\r\n                (this.usePopupTrigger || !mxEvent.isPopupTrigger(me.getEvent())) &&\r\n                ((!mxEvent.isControlDown(me.getEvent()) &&\r\n                    mxEvent.isRightMouseButton(me.getEvent())) ||\r\n                    mxEvent.isMiddleMouseButton(me.getEvent())));\r\n        };\r\n        // create the styles used in the graph\r\n        createStyles(graph);\r\n        // construct the graph renderer that will allow us render each type of cells\r\n        var graphRenderer = new _CellFactory__WEBPACK_IMPORTED_MODULE_3__[\"GraphCellRenderer\"](graph);\r\n        // allow highlighting of cells on mouse over\r\n        new mxCellTracker(graph, '#00d5f4', function (me) {\r\n            var cell = me.getCell();\r\n            var excludedStyles = [\"suppliers\", \"partDetails\"];\r\n            if (cell && excludedStyles.indexOf(cell.style) >= 0) {\r\n                return null;\r\n            }\r\n            else {\r\n                return cell;\r\n            }\r\n        });\r\n        // a handler for basic keystrokes (eg. return, escape during editing).\r\n        new mxKeyHandler(graph);\r\n        /**\r\n         * Retrieves the editing value of a cell\r\n         */\r\n        graph.getEditingValue = function (cell) {\r\n            if (cell.value && cell.value.isEditable) {\r\n                return cell.value.value;\r\n            }\r\n        };\r\n        /**\r\n         * Sets the cell label back after a edit\r\n         */\r\n        var graphCellLabelChanged_1 = graph.cellLabelChanged;\r\n        graph.cellLabelChanged = function (cell, newValue, autoSize) {\r\n            if (cell.value && cell.value.isEditable) {\r\n                cell.value.value = newValue;\r\n                newValue = cell.value;\r\n            }\r\n            graphCellLabelChanged_1.apply(this, [cell, newValue, autoSize]);\r\n        };\r\n        // Installs a custom tooltip for cells\r\n        graph.getTooltipForCell = graphRenderer.getCellTooltip;\r\n        graph.isLabelClipped = graphRenderer.isLabelClipped;\r\n        // Make sure the cells can be folded\r\n        graph.isCellFoldable = graphRenderer.isCellFoldable;\r\n        // Make sure only the parts specified in the model as editable are actually so.\r\n        graph.isCellEditable = graphRenderer.isCellEditable;\r\n        // make sure some of the cells can be selected\r\n        graph.isCellSelectable = graphRenderer.isCellSelectable;\r\n        // Installs auto layout for all levels\r\n        var layoutMgr = new mxLayoutManager(graph);\r\n        layoutMgr.getLayout = graphRenderer.getLayout;\r\n        // for each type of cell, grab the cell label in a different way\r\n        graph.getLabel = graphRenderer.getCellLabel;\r\n        // Extends mxGraphModel.getStyle change the style of suppliers when collapsed\r\n        // TODO: this should not be needed. Collapsing should go back to the correct size of the supplier cell\r\n        // however, the preffered size is not computed correctly\r\n        var modelGetStyle = graph.model.getStyle;\r\n        graph.model.getStyle = function (cell) {\r\n            if (cell != null) {\r\n                var style = modelGetStyle.apply(this, arguments);\r\n                if (cell.style == 'supplier' && this.isCollapsed(cell)) {\r\n                    style = 'rectangle';\r\n                }\r\n                return style;\r\n            }\r\n            return null;\r\n        };\r\n        // Extends mxCellRenderer.getControlBounds to move the collapse icon lower for factories and suppliers\r\n        var cellRendererControlBounds = graph.cellRenderer.getControlBounds;\r\n        graph.cellRenderer.getControlBounds = function (state, w, h) {\r\n            var value = cellRendererControlBounds.apply(this, arguments);\r\n            if (state.style.shape == \"mxgraph.lean_mapping.outside_sources\") {\r\n                return state.shape.getControlBounds(value, w, h);\r\n            }\r\n            return value;\r\n        };\r\n        // Enables rubberband selection\r\n        new mxRubberband(graph);\r\n        // Gets the default parent for inserting new cells. This\r\n        // is normally the first child of the root (ie. layer 0).\r\n        var parent = graph.getDefaultParent();\r\n        // set a prefix for the generated ids so they do not conflict with our set ones\r\n        graph.getModel().prefix = \"autoGenerated\";\r\n        // Adds cells to the model in a single step\r\n        graph.getModel().beginUpdate();\r\n        try {\r\n            // begin rendering the datamodel\r\n            new _ValueProcessNodeRenderer__WEBPACK_IMPORTED_MODULE_4__[\"ValueProcessDiagramRenderer\"](parent, data, graph).render();\r\n        }\r\n        finally {\r\n            // Updates the display\r\n            graph.getModel().endUpdate();\r\n        }\r\n        // Adds a button to execute the layout\r\n        var parent = graph.getDefaultParent();\r\n        layoutMgr.executeLayout(parent);\r\n        new mxCircleLayout(graph).execute(graph.getDefaultParent());\r\n        new mxParallelEdgeLayout(graph).execute(graph.getDefaultParent());\r\n        return graph;\r\n    }\r\n    ;\r\n    function createStyles(graph) {\r\n        // Enables crisp rendering of rectangles in SVG\r\n        var style = graph.getStylesheet().getDefaultVertexStyle();\r\n        style[mxConstants.STYLE_ROUNDED] = false;\r\n        style[mxConstants.STYLE_FONTCOLOR] = '#1d1b1b';\r\n        style[mxConstants.STYLE_STROKECOLOR] = '#dadfe2';\r\n        style[mxConstants.STYLE_FILLCOLOR] = '#f3f4f9';\r\n        // create the suppliers cell\r\n        style = mxUtils.clone(style);\r\n        style[mxConstants.STYLE_FILLCOLOR] = 'transparent';\r\n        style[mxConstants.STYLE_STROKECOLOR] = 'transparent';\r\n        style[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_RECTANGLE;\r\n        style[mxConstants.STYLE_PERIMETER] = mxConstants.PERIMETER_RECTANGLE;\r\n        graph.getStylesheet().putCellStyle('suppliers', style);\r\n        graph.getStylesheet().putCellStyle('inventoryContainer', style);\r\n        // create the supplier cell\r\n        style = mxUtils.clone(style);\r\n        style[mxConstants.STYLE_SHAPE] = 'mxgraph.lean_mapping.outside_sources';\r\n        style[mxConstants.STYLE_FONTSIZE] = 15;\r\n        style[mxConstants.STYLE_FONTCOLOR] = 'black';\r\n        style[mxConstants.STYLE_STROKECOLOR] = '#aaa';\r\n        style[mxConstants.STYLE_STROKEWIDTH] = 2;\r\n        graph.getStylesheet().putCellStyle('supplier', style);\r\n        style = mxUtils.clone(style);\r\n        graph.getStylesheet().putCellStyle('factory', style);\r\n        // create the process cell\r\n        style = mxUtils.clone(graph.getStylesheet().getDefaultVertexStyle());\r\n        style[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_SWIMLANE;\r\n        style[mxConstants.STYLE_FONTSIZE] = 13;\r\n        style[mxConstants.STYLE_STARTSIZE] = 20;\r\n        style[mxConstants.STYLE_STROKECOLOR] = '#2f4be9';\r\n        style[mxConstants.STYLE_FILLCOLOR] = '#4762f9';\r\n        style[mxConstants.STYLE_FONTCOLOR] = 'white';\r\n        graph.getStylesheet().putCellStyle('process', style);\r\n        // create the style for the part cell\r\n        style = mxUtils.clone(graph.getStylesheet().getDefaultVertexStyle());\r\n        style[mxConstants.STYLE_STROKECOLOR] = '#2f4be9';\r\n        style[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_SWIMLANE;\r\n        style[mxConstants.STYLE_FONTCOLOR] = 'white';\r\n        style[mxConstants.STYLE_STARTSIZE] = 25;\r\n        style[mxConstants.STYLE_FONTSIZE] = 13;\r\n        style[mxConstants.STYLE_FILLCOLOR] = '#4762f9';\r\n        graph.getStylesheet().putCellStyle('part', style);\r\n        // create the style for the capability cell\r\n        style = mxUtils.clone(graph.getStylesheet().getDefaultVertexStyle());\r\n        style[mxConstants.STYLE_STROKECOLOR] = '#666666';\r\n        style[mxConstants.STYLE_FILLCOLOR] = '#bbb';\r\n        style[mxConstants.STYLE_STROKEWIDTH] = 1.5;\r\n        graph.getStylesheet().putCellStyle('capability', style);\r\n        // Creates the default style for edges\r\n        style = {};\r\n        style[mxConstants.STYLE_ROUNDED] = true;\r\n        style[mxConstants.STYLE_EDGE] = mxConstants.EDGESTYLE_ORTHOGONAL;\r\n        style[mxConstants.STYLE_SHAPE] = 'flexArrow';\r\n        style[mxConstants.STYLE_ENDARROW] = mxConstants.ARROW_CLASSIC;\r\n        style['width'] = 3;\r\n        style['endSize'] = 4.5;\r\n        style['endWidth'] = 11;\r\n        style[mxConstants.STYLE_VERTICAL_ALIGN] = mxConstants.ALIGN_MIDDLE;\r\n        style[mxConstants.STYLE_ALIGN] = mxConstants.ALIGN_CENTER;\r\n        style[mxConstants.STYLE_STROKECOLOR] = \"#43b9a4\";\r\n        style[mxConstants.STYLE_FILLCOLOR] = \"#42dcc0\";\r\n        style[mxConstants.STYLE_FONTCOLOR] = \"#446299\";\r\n        graph.getStylesheet().putDefaultEdgeStyle(style);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/value_process/mxValueProcessDiagram.ts\n");

/***/ }),

/***/ "./src/value_process/mxValueProcessLayout.ts":
/*!***************************************************!*\
  !*** ./src/value_process/mxValueProcessLayout.ts ***!
  \***************************************************/
/*! exports provided: mxValueProcessLayout */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mxValueProcessLayout\", function() { return mxValueProcessLayout; });\n/* harmony import */ var _generic_mxGraphImport__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../generic/mxGraphImport */ \"./src/generic/mxGraphImport.ts\");\n/**\r\n * Copyright (c) 2006-2015, JGraph Ltd\r\n * Copyright (c) 2006-2015, Gaudenz Alder\r\n * Copyright (c) 2017, Petrisor Lacatus\r\n */\r\n\r\nvar mxGraphLayout = _generic_mxGraphImport__WEBPACK_IMPORTED_MODULE_0__[\"mxgraph\"].mxGraphLayout, mxRectangle = _generic_mxGraphImport__WEBPACK_IMPORTED_MODULE_0__[\"mxgraph\"].mxRectangle, mxConstants = _generic_mxGraphImport__WEBPACK_IMPORTED_MODULE_0__[\"mxgraph\"].mxConstants, mxUtils = _generic_mxGraphImport__WEBPACK_IMPORTED_MODULE_0__[\"mxgraph\"].mxUtils;\r\n/**\r\n* Class: mxValueProcessLayout\r\n*\r\n* Extends <mxGraphLayout> to create a horizontal or vertical stack of the\r\n* child vertices. The children do not need to be connected for this layout\r\n* to work.\r\n*\r\n* Example:\r\n*\r\n* (code)\r\n* var layout = new mxValueProcessLayout(graph, true);\r\n* layout.execute(graph.getDefaultParent());\r\n* (end)\r\n*\r\n* Constructor: mxValueProcessLayout\r\n*\r\n* Constructs a new stack layout layout for the specified graph,\r\n* spacing, orientation and offset.\r\n*/\r\nfunction mxValueProcessLayout(graph, horizontal, spacing, x0, y0, border) {\r\n    mxGraphLayout.call(this, graph);\r\n    this.horizontal = (horizontal != null) ? horizontal : true;\r\n    this.spacing = (spacing != null) ? spacing : 0;\r\n    this.x0 = (x0 != null) ? x0 : 0;\r\n    this.y0 = (y0 != null) ? y0 : 0;\r\n    this.border = (border != null) ? border : 0;\r\n}\r\n;\r\n/**\r\n* Extends mxGraphLayout.\r\n*/\r\nmxValueProcessLayout.prototype = new mxGraphLayout();\r\nmxValueProcessLayout.prototype.constructor = mxValueProcessLayout;\r\n/**\r\n* Variable: horizontal\r\n*\r\n* Specifies the orientation of the layout. Default is true.\r\n*/\r\nmxValueProcessLayout.prototype.horizontal = null;\r\n/**\r\n* Variable: spacing\r\n*\r\n* Specifies the spacing between the cells. Default is 0.\r\n*/\r\nmxValueProcessLayout.prototype.spacing = null;\r\n/**\r\n* Variable: x0\r\n*\r\n* Specifies the horizontal origin of the layout. Default is 0.\r\n*/\r\nmxValueProcessLayout.prototype.x0 = null;\r\n/**\r\n* Variable: y0\r\n*\r\n* Specifies the vertical origin of the layout. Default is 0.\r\n*/\r\nmxValueProcessLayout.prototype.y0 = null;\r\n/**\r\n* Variable: border\r\n*\r\n* Border to be added if fill is true. Default is 0.\r\n*/\r\nmxValueProcessLayout.prototype.border = 0;\r\n/**\r\n* Variable: marginTop\r\n*\r\n* Top margin for the child area. Default is 0.\r\n*/\r\nmxValueProcessLayout.prototype.marginTop = 0;\r\n/**\r\n* Variable: marginLeft\r\n*\r\n* Top margin for the child area. Default is 0.\r\n*/\r\nmxValueProcessLayout.prototype.marginLeft = 0;\r\n/**\r\n* Variable: marginRight\r\n*\r\n* Top margin for the child area. Default is 0.\r\n*/\r\nmxValueProcessLayout.prototype.marginRight = 0;\r\n/**\r\n* Variable: marginBottom\r\n*\r\n* Top margin for the child area. Default is 0.\r\n*/\r\nmxValueProcessLayout.prototype.marginBottom = 0;\r\n/**\r\n* Variable: keepFirstLocation\r\n*\r\n* Boolean indicating if the location of the first cell should be\r\n* kept, that is, it will not be moved to x0 or y0.\r\n*/\r\nmxValueProcessLayout.prototype.keepFirstLocation = false;\r\n/**\r\n* Variable: fill\r\n*\r\n* Boolean indicating if dimension should be changed to fill out the parent\r\n* cell. Default is false.\r\n*/\r\nmxValueProcessLayout.prototype.fill = false;\r\n/**\r\n* Variable: fillSpacing\r\n*\r\n* The spacing to add to the fill of a box\r\n*/\r\nmxValueProcessLayout.prototype.fillSpacing = 0;\r\n/**\r\n* Variable: resizeParent\r\n*\r\n* If the parent should be resized to match the width/height of the\r\n* stack. Default is false.\r\n*/\r\nmxValueProcessLayout.prototype.resizeParent = false;\r\n/**\r\n* Variable: resizeParentMax\r\n*\r\n* Use maximum of existing value and new value for resize of parent.\r\n* Default is false.\r\n*/\r\nmxValueProcessLayout.prototype.resizeParentMax = false;\r\n/**\r\n* Variable: resizeLast\r\n*\r\n* If the last element should be resized to fill out the parent. Default is\r\n* false. If <resizeParent> is true then this is ignored.\r\n*/\r\nmxValueProcessLayout.prototype.resizeLast = false;\r\n/**\r\n* Variable: wrap\r\n*\r\n* Value at which a new column or row should be created. Default is null.\r\n*/\r\nmxValueProcessLayout.prototype.wrap = null;\r\n/**\r\n* Variable: borderCollapse\r\n*\r\n* If the strokeWidth should be ignored. Default is true.\r\n*/\r\nmxValueProcessLayout.prototype.borderCollapse = true;\r\n/**\r\n* Function: isHorizontal\r\n*\r\n* Returns <horizontal>.\r\n*/\r\nmxValueProcessLayout.prototype.isHorizontal = function () {\r\n    return this.horizontal;\r\n};\r\n/**\r\n* Function: moveCell\r\n*\r\n* Implements <mxGraphLayout.moveCell>.\r\n*/\r\nmxValueProcessLayout.prototype.moveCell = function (cell, x, y) {\r\n    var model = this.graph.getModel();\r\n    var parent = model.getParent(cell);\r\n    var horizontal = this.isHorizontal();\r\n    if (cell != null && parent != null) {\r\n        var i = 0;\r\n        var last = 0;\r\n        var childCount = model.getChildCount(parent);\r\n        var value = (horizontal) ? x : y;\r\n        var pstate = this.graph.getView().getState(parent);\r\n        if (pstate != null) {\r\n            value -= (horizontal) ? pstate.x : pstate.y;\r\n        }\r\n        value /= this.graph.view.scale;\r\n        for (i = 0; i < childCount; i++) {\r\n            var child = model.getChildAt(parent, i);\r\n            if (child != cell) {\r\n                var bounds = model.getGeometry(child);\r\n                if (bounds != null) {\r\n                    var tmp = (horizontal) ?\r\n                        bounds.x + bounds.width / 2 :\r\n                        bounds.y + bounds.height / 2;\r\n                    if (last <= value && tmp > value) {\r\n                        break;\r\n                    }\r\n                    last = tmp;\r\n                }\r\n            }\r\n        }\r\n        // Changes child order in parent\r\n        var idx = parent.getIndex(cell);\r\n        idx = Math.max(0, i - ((i > idx) ? 1 : 0));\r\n        model.add(parent, cell, idx);\r\n    }\r\n};\r\n/**\r\n* Function: getParentSize\r\n*\r\n* Returns the size for the parent container or the size of the graph\r\n* container if the parent is a layer or the root of the model.\r\n*/\r\nmxValueProcessLayout.prototype.getParentSize = function (parent) {\r\n    var model = this.graph.getModel();\r\n    var pgeo = model.getGeometry(parent);\r\n    // Handles special case where the parent is either a layer with no\r\n    // geometry or the current root of the view in which case the size\r\n    // of the graph's container will be used.\r\n    if (this.graph.container != null && ((pgeo == null &&\r\n        model.isLayer(parent)) || parent == this.graph.getView().currentRoot)) {\r\n        var width = this.graph.container.offsetWidth - 1;\r\n        var height = this.graph.container.offsetHeight - 1;\r\n        pgeo = new mxRectangle(0, 0, width, height);\r\n    }\r\n    return pgeo;\r\n};\r\n/**\r\n* Function: execute\r\n*\r\n* Implements <mxGraphLayout.execute>.\r\n*\r\n* Only children where <isVertexIgnored> returns false are taken into\r\n* account.\r\n*/\r\nmxValueProcessLayout.prototype.execute = function (parent) {\r\n    if (parent != null) {\r\n        var pgeo = this.getParentSize(parent);\r\n        var horizontal = this.isHorizontal();\r\n        var model = this.graph.getModel();\r\n        var fillValue = null;\r\n        if (pgeo != null) {\r\n            fillValue = (horizontal) ? pgeo.height - this.marginTop - this.marginBottom :\r\n                pgeo.width - this.marginLeft - this.marginRight;\r\n        }\r\n        fillValue -= 2 * this.spacing + 2 * this.border;\r\n        var x0 = this.x0 + this.border + this.marginLeft;\r\n        var y0 = this.y0 + this.border + this.marginTop;\r\n        // Handles swimlane start size\r\n        if (this.graph.isSwimlane(parent)) {\r\n            // Uses computed style to get latest \r\n            var style = this.graph.getCellStyle(parent);\r\n            var start = mxUtils.getNumber(style, mxConstants.STYLE_STARTSIZE, mxConstants.DEFAULT_STARTSIZE);\r\n            var horz = mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, true) == 1;\r\n            if (pgeo != null) {\r\n                if (horz) {\r\n                    start = Math.min(start, pgeo.height);\r\n                }\r\n                else {\r\n                    start = Math.min(start, pgeo.width);\r\n                }\r\n            }\r\n            if (horizontal == horz) {\r\n                fillValue -= start;\r\n            }\r\n            if (horz) {\r\n                y0 += start;\r\n            }\r\n            else {\r\n                x0 += start;\r\n            }\r\n        }\r\n        model.beginUpdate();\r\n        try {\r\n            var tmp = 0;\r\n            var last = null;\r\n            // last value along the growth axis (horizontal or vertical depending on the layout)\r\n            var lastValueG = 0;\r\n            // last value along the non-growth axis\r\n            var lastValueN = 0;\r\n            var lastChild = null;\r\n            var childCount = model.getChildCount(parent);\r\n            for (var i = 0; i < childCount; i++) {\r\n                var child = model.getChildAt(parent, i);\r\n                if (!this.isVertexIgnored(child) && this.isVertexMovable(child)) {\r\n                    var geo = model.getGeometry(child);\r\n                    if (model.getChildCount(child) == 0) {\r\n                        var preferredSize = this.graph.getPreferredSizeForCell(child);\r\n                        geo.width = preferredSize.width;\r\n                        geo.height = preferredSize.height;\r\n                    }\r\n                    if (geo != null) {\r\n                        geo = geo.clone();\r\n                        if (this.wrap != null && last != null) {\r\n                            if ((horizontal && last.x + last.width +\r\n                                geo.width + 2 * this.spacing > this.wrap) ||\r\n                                (!horizontal && last.y + last.height +\r\n                                    geo.height + 2 * this.spacing > this.wrap)) {\r\n                                last = null;\r\n                                if (horizontal) {\r\n                                    y0 += tmp + this.spacing;\r\n                                }\r\n                                else {\r\n                                    x0 += tmp + this.spacing;\r\n                                }\r\n                                tmp = 0;\r\n                            }\r\n                        }\r\n                        tmp = Math.max(tmp, (horizontal) ? geo.height : geo.width);\r\n                        var sw = 0;\r\n                        if (!this.borderCollapse) {\r\n                            var childStyle = this.graph.getCellStyle(child);\r\n                            sw = mxUtils.getNumber(childStyle, mxConstants.STYLE_STROKEWIDTH, 1);\r\n                        }\r\n                        if (last != null) {\r\n                            if (horizontal) {\r\n                                geo.x = lastValueG + this.spacing + Math.floor(sw / 2);\r\n                            }\r\n                            else {\r\n                                geo.y = lastValueG + this.spacing + Math.floor(sw / 2);\r\n                            }\r\n                        }\r\n                        else if (!this.keepFirstLocation) {\r\n                            if (horizontal) {\r\n                                geo.x = x0;\r\n                            }\r\n                            else {\r\n                                geo.y = y0;\r\n                            }\r\n                        }\r\n                        if (horizontal) {\r\n                            geo.y = y0;\r\n                        }\r\n                        else {\r\n                            geo.x = x0;\r\n                        }\r\n                        if (this.fill && fillValue != null) {\r\n                            if (horizontal) {\r\n                                geo.height = fillValue + this.fillSpacing;\r\n                            }\r\n                            else {\r\n                                geo.width = fillValue + this.fillSpacing;\r\n                            }\r\n                        }\r\n                        this.setChildGeometry(child, geo);\r\n                        lastChild = child;\r\n                        last = geo;\r\n                        if (horizontal) {\r\n                            lastValueG = last.x + last.width + Math.floor(sw / 2);\r\n                            lastValueN = Math.max(lastValueN, last.height + last.y);\r\n                        }\r\n                        else {\r\n                            lastValueG = last.y + last.height + Math.floor(sw / 2);\r\n                            lastValueN = Math.max(lastValueN, last.width + last.x);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (this.resizeParent && pgeo != null && last != null && !this.graph.isCellCollapsed(parent)) {\r\n                this.updateParentGeometry(parent, pgeo, last, lastValueN);\r\n            }\r\n            else if (this.resizeLast && pgeo != null && last != null && lastChild != null) {\r\n                if (horizontal) {\r\n                    last.width = pgeo.width - last.x - this.spacing - this.marginRight - this.marginLeft;\r\n                }\r\n                else {\r\n                    last.height = pgeo.height - last.y - this.spacing - this.marginBottom;\r\n                }\r\n                this.setChildGeometry(lastChild, last);\r\n            }\r\n        }\r\n        finally {\r\n            model.endUpdate();\r\n        }\r\n    }\r\n};\r\n/**\r\n* Function: execute\r\n*\r\n* Implements <mxGraphLayout.execute>.\r\n*\r\n* Only children where <isVertexIgnored> returns false are taken into\r\n* account.\r\n*/\r\nmxValueProcessLayout.prototype.setChildGeometry = function (child, geo) {\r\n    var geo2 = this.graph.getCellGeometry(child);\r\n    if (geo2 == null || geo.x != geo2.x || geo.y != geo2.y ||\r\n        geo.width != geo2.width || geo.height != geo2.height) {\r\n        this.graph.getModel().setGeometry(child, geo);\r\n    }\r\n};\r\n/**\r\n* Function: execute\r\n*\r\n* Implements <mxGraphLayout.execute>.\r\n*\r\n* Only children where <isVertexIgnored> returns false are taken into\r\n* account.\r\n*/\r\nmxValueProcessLayout.prototype.updateParentGeometry = function (parent, pgeo, last, lastValueN) {\r\n    var horizontal = this.isHorizontal();\r\n    var model = this.graph.getModel();\r\n    var pgeo2 = pgeo.clone();\r\n    var preferredSize = this.graph.getPreferredSizeForCell(parent);\r\n    if (horizontal) {\r\n        pgeo2.height = Math.max(lastValueN + this.marginBottom, preferredSize ? preferredSize.height : 0);\r\n        var tmp = last.x + last.width + this.spacing + this.marginRight;\r\n        if (this.resizeParentMax) {\r\n            pgeo2.width = Math.max(pgeo2.width, tmp);\r\n        }\r\n        else {\r\n            pgeo2.width = Math.max(tmp, preferredSize ? preferredSize.width : 0);\r\n        }\r\n    }\r\n    else {\r\n        pgeo2.width = Math.max(lastValueN + this.marginRight, preferredSize.width);\r\n        var tmp = last.y + last.height + this.spacing + this.marginBottom;\r\n        if (this.resizeParentMax) {\r\n            pgeo2.height = Math.max(pgeo2.height, tmp);\r\n        }\r\n        else {\r\n            pgeo2.height = Math.max(tmp, preferredSize.height);\r\n        }\r\n    }\r\n    if (pgeo.x != pgeo2.x || pgeo.y != pgeo2.y ||\r\n        pgeo.width != pgeo2.width || pgeo.height != pgeo2.height) {\r\n        model.setGeometry(parent, pgeo2);\r\n    }\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/value_process/mxValueProcessLayout.ts\n");

/***/ }),

/***/ "./src/value_process/resources/lean_mapping.xml":
/*!******************************************************!*\
  !*** ./src/value_process/resources/lean_mapping.xml ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__.p + \"72cc74a3652ac6c641b76e1412da96a8.xml\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdmFsdWVfcHJvY2Vzcy9yZXNvdXJjZXMvbGVhbl9tYXBwaW5nLnhtbD8yNjFiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6Ii4vc3JjL3ZhbHVlX3Byb2Nlc3MvcmVzb3VyY2VzL2xlYW5fbWFwcGluZy54bWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCI3MmNjNzRhMzY1MmFjNmM2NDFiNzZlMTQxMmRhOTZhOC54bWxcIjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/value_process/resources/lean_mapping.xml\n");

/***/ }),

/***/ "./src/value_process/resources/truckIcon.png":
/*!***************************************************!*\
  !*** ./src/value_process/resources/truckIcon.png ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__.p + \"39deaf7208b24b9b3b617ae4365d1372.png\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdmFsdWVfcHJvY2Vzcy9yZXNvdXJjZXMvdHJ1Y2tJY29uLnBuZz82OWI0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6Ii4vc3JjL3ZhbHVlX3Byb2Nlc3MvcmVzb3VyY2VzL3RydWNrSWNvbi5wbmcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCIzOWRlYWY3MjA4YjI0YjliM2I2MTdhZTQzNjVkMTM3Mi5wbmdcIjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/value_process/resources/truckIcon.png\n");

/***/ })

}]);